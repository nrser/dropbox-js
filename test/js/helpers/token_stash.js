// Generated by CoffeeScript 1.9.1
(function() {
  var TokenStash;

  TokenStash = (function() {
    function TokenStash(options) {
      var path;
      this._tlsOptions = (options != null ? options.tls : void 0) || {};
      this._fs = require('fs');
      if (!this._fs.existsSync) {
        path = require('path');
        this._fs.existsSync = function(filePath) {
          return path.existsSync(filePath);
        };
      }
      this._getCache = null;
      this.setupFs();
    }

    TokenStash.prototype.get = function(callback) {
      this._getCache || (this._getCache = this.readStash());
      if (this._getCache) {
        callback(this._getCache);
        return null;
      }
      this.liveLogin((function(_this) {
        return function(fullCredentials, sandboxCredentials) {
          if (!(fullCredentials && sandboxCredentials)) {
            throw new Error('Dropbox API authorization failed');
          }
          _this.writeStash(fullCredentials, sandboxCredentials);
          _this._getCache = _this.readStash();
          return callback(_this._getCache);
        };
      })(this));
      return null;
    };

    TokenStash.prototype.liveLogin = function(callback) {
      var Dropbox, fullClient, sandboxClient;
      Dropbox = require('../../../lib/dropbox');
      sandboxClient = new Dropbox.Client(this.clientOptions().sandbox);
      fullClient = new Dropbox.Client(this.clientOptions().full);
      this.setupAuth();
      sandboxClient.authDriver(this._authDriver);
      sandboxClient.authenticate((function(_this) {
        return function(error, data) {
          if (error) {
            _this.killAuth();
            console.error(error);
            callback(null);
            return;
          }
          fullClient.authDriver(_this._authDriver);
          return fullClient.authenticate(function(error, data) {
            var credentials;
            _this.killAuth();
            if (error) {
              console.error(error);
              callback(null);
              return;
            }
            credentials = _this.clientOptions();
            return callback(fullClient.credentials(), sandboxClient.credentials());
          });
        };
      })(this));
      return null;
    };

    TokenStash.prototype.clientOptions = function() {
      if (process.env['API_CONFIG']) {
        return JSON.parse(this._fs.readFileSync(process.env['API_CONFIG']));
      } else {
        return {
          sandbox: {
            key: 'xa6rd0x8wsuk9hc',
            secret: 'y6nw1t64rcppd8a'
          },
          full: {
            key: 'c9x6i3k2zlwz21g',
            secret: '82nxm80jz231rpn'
          }
        };
      }
    };

    TokenStash.prototype.readStash = function() {
      if (!this._fs.existsSync(this._jsonPath)) {
        return null;
      }
      return JSON.parse(this._fs.readFileSync(this._jsonPath));
    };

    TokenStash.prototype.writeStash = function(fullCredentials, sandboxCredentials) {
      var browserJs, json, workerJs;
      json = JSON.stringify({
        full: fullCredentials,
        sandbox: sandboxCredentials
      });
      this._fs.writeFileSync(this._jsonPath, json);
      browserJs = ("window.testKeys = " + (JSON.stringify(sandboxCredentials)) + ";") + ("window.testFullDropboxKeys = " + (JSON.stringify(fullCredentials)) + ";");
      this._fs.writeFileSync(this._browserJsPath, browserJs);
      workerJs = ("self.testKeys = " + (JSON.stringify(sandboxCredentials)) + ";") + ("self.testFullDropboxKeys = " + (JSON.stringify(fullCredentials)) + ";");
      this._fs.writeFileSync(this._workerJsPath, workerJs);
      return null;
    };

    TokenStash.prototype.setupAuth = function() {
      var Dropbox;
      if (this._authDriver) {
        return;
      }
      Dropbox = require('../../../lib/dropbox');
      return this._authDriver = new Dropbox.AuthDriver.NodeServer({
        tls: this._tlsOptions
      });
    };

    TokenStash.prototype.killAuth = function() {
      if (!this._authDriver) {
        return;
      }
      this._authDriver.closeServer();
      return this._authDriver = null;
    };

    TokenStash.prototype.setupFs = function() {
      this._dirPath = 'test/token';
      this._jsonPath = 'test/token/token.json';
      this._browserJsPath = 'test/token/token.browser.js';
      this._workerJsPath = 'test/token/token.worker.js';
      if (!this._fs.existsSync(this._dirPath)) {
        return this._fs.mkdirSync(this._dirPath);
      }
    };

    return TokenStash;

  })();

  module.exports = TokenStash;

}).call(this);
