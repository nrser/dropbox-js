// Generated by CoffeeScript 1.9.1
(function() {
  var WebFileServer, express, fs, http, https;

  express = require('express');

  fs = require('fs');

  http = require('http');

  https = require('https');

  WebFileServer = (function() {
    function WebFileServer(options) {
      if (options == null) {
        options = {};
      }
      this.port = options.port || 8911;
      this.noSsl = !!options.noSsl;
      this.protocol = this.noSsl ? 'http' : 'https';
      this.createApp();
    }

    WebFileServer.prototype.testOrigin = function() {
      return this.protocol + "://localhost:" + this.port;
    };

    WebFileServer.prototype.testUrl = function() {
      return this.protocol + "://localhost:" + this.port + "/test/html/browser_test.html";
    };

    WebFileServer.prototype.consoleUrl = function() {
      return this.protocol + "://localhost:" + this.port + "/test/html/browser_console.html";
    };

    WebFileServer.prototype.certificate = function() {
      var certIndex, keyMaterial;
      if (!this.useHttps) {
        return null;
      }
      keyMaterial = fs.readFileSync('test/ssl/cert.pem', 'utf8');
      certIndex = keyMaterial.indexOf('-----BEGIN CERTIFICATE-----');
      return keyMaterial.substring(certIndex);
    };

    WebFileServer.prototype.createApp = function() {
      var options;
      this.app = express();
      this.app.use(function(request, response, next) {
        response.header('Access-Control-Allow-Origin', '*');
        response.header('Access-Control-Allow-Methods', 'DELETE,GET,POST,PUT');
        response.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
        response.header('Access-Control-Expose-Headers', 'x-dropbox-metadata');
        return next();
      });
      this.app.use(function(request, response, next) {
        response.header('Cache-Control', 'no-cache');
        response.header('Expires', '-1');
        return next();
      });
      this.app.use(express["static"](fs.realpathSync(__dirname + '/../../../'), {
        hidden: true
      }));
      this.app.get('/diediedie', (function(_this) {
        return function(request, response) {
          var exitCode, failed, passed, total;
          if ('failed' in request.query) {
            failed = parseInt(request.query['failed']);
          } else {
            failed = 1;
          }
          total = parseInt(request.query['total'] || 0);
          passed = total - failed;
          exitCode = failed === 0 ? 0 : 1;
          console.log(passed + " passed, " + failed + " failed");
          response.header('Content-Type', 'image/png');
          response.header('Content-Length', '0');
          response.end('');
          if (!('NO_EXIT' in process.env)) {
            _this.server.close();
            return process.exit(exitCode);
          }
        };
      })(this));
      this.app.post('/form_encoded', function(request, response) {
        var body, charset, contentType;
        body = 'access_token=test%20token&token_type=Bearer';
        contentType = 'application/x-www-form-urlencoded';
        if (charset = request.param('charset')) {
          contentType += "; charset=" + charset;
        }
        response.header('Content-Type', contentType);
        response.header('Content-Length', body.length.toString());
        return response.end(body);
      });
      this.app.post('/json_encoded', function(request, response) {
        var body, charset, contentType;
        body = JSON.stringify({
          uid: 42,
          country: 'US',
          display_name: 'John P. User'
        });
        contentType = 'application/json';
        if (charset = request.param('charset')) {
          contentType += "; charset=" + charset;
        }
        response.header('Content-Type', contentType);
        response.header('Content-Length', body.length.toString());
        return response.end(body);
      });
      this.app.get('/dropbox_file', function(request, response) {
        var body, metadata;
        if (request.get('Authorization') !== 'Bearer mock00token') {
          body = JSON.stringify({
            error: 'invalid access token'
          });
          response.status(401);
          response.header('Content-Type', 'text/javascript');
          response.header('Content-Length', body.length);
          response.end(body);
          return;
        }
        metadata = JSON.stringify({
          size: '1KB',
          is_dir: false,
          path: '/test_path.txt',
          root: 'dropbox'
        });
        body = 'Test file contents';
        response.header('Content-Type', 'text/plain');
        response.header('X-Dropbox-Metadata', metadata);
        response.header('Content-Length', body.length);
        return response.end(body);
      });
      this.app.get('/dropbox_file_bug/:bug_id', function(request, response) {
        var body, metadata;
        metadata = JSON.stringify({
          size: '1KB',
          is_dir: false,
          path: '/test_path.txt',
          root: 'dropbox'
        });
        body = 'Test file contents';
        response.header('Content-Type', 'text/plain');
        switch (request.params.bug_id) {
          case '2x':
            response.header('X-Dropbox-Metadata', metadata + ", " + metadata);
            break;
          case 'txt':
            response.header('X-Dropbox-Metadata', 'no json here');
        }
        return response.end(body);
      });
      if (this.noSsl) {
        this.server = http.createServer(this.app);
      } else {
        options = {
          key: fs.readFileSync('test/ssl/cert.pem')
        };
        options.cert = options.key;
        this.server = https.createServer(options, this.app);
      }
      return this.server.listen(this.port);
    };

    return WebFileServer;

  })();

  module.exports = WebFileServer;

}).call(this);
