// Generated by CoffeeScript 1.9.1
(function() {
  var TokenStash, WebFileServer, buffer, exports, fs, i, ref, stash, testImagePath, tlsOptions, webFileServer;

  if ((typeof global !== "undefined" && global !== null) && (typeof require !== "undefined" && require !== null) && (typeof module !== "undefined" && module !== null) && (typeof cordova === "undefined" || cordova === null)) {
    require('source-map-support').install();
    exports = global;
    exports.Dropbox = require('../../../lib/dropbox');
    exports.chai = require('chai');
    exports.sinon = require('sinon');
    exports.sinonChai = require('sinon-chai');
    tlsOptions = {
      key: require('fs').readFileSync('test/ssl/cert.pem')
    };
    tlsOptions.cert = tlsOptions.key;
    exports.authDriver = new Dropbox.AuthDriver.NodeServer({
      tls: tlsOptions,
      port: 8912
    });
    TokenStash = require('./token_stash.js');
    stash = new TokenStash();
    stash.get(function(credentials) {
      exports.testKeys = credentials.sandbox;
      return exports.testFullDropboxKeys = credentials.full;
    });
    WebFileServer = require('./web_file_server.js');
    webFileServer = new WebFileServer();
    exports.testXhrServer = webFileServer.testOrigin();
    testImagePath = './test/binary/dropbox.png';
    fs = require('fs');
    buffer = fs.readFileSync(testImagePath);
    exports.testImageBytes = (function() {
      var j, ref, results;
      results = [];
      for (i = j = 0, ref = buffer.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        results.push(buffer.readUInt8(i));
      }
      return results;
    })();
  } else {
    if (typeof chrome !== "undefined" && chrome !== null ? (ref = chrome.runtime) != null ? ref.id : void 0 : void 0) {
      exports = window;
      if (chrome.tabs && chrome.tabs.create) {
        exports.authDriver = new Dropbox.AuthDriver.ChromeExtension({
          receiverPath: 'test/html/chrome_oauth_receiver.html',
          scope: 'helper-chrome'
        });
      } else {
        exports.authDriver = new Dropbox.AuthDriver.ChromeApp({
          scope: 'helper-chrome'
        });
      }
      exports.authDriver.storeCredentials = function(credentials, callback) {
        return callback();
      };
      exports.authDriver.loadCredentials = function(callback) {
        return callback(null);
      };
      exports.testXhrServer = 'http://localhost:8911';
    } else {
      if (typeof window === 'undefined' && typeof self !== 'undefined') {
        exports = self;
        exports.authDriver = null;
        exports.testXhrServer = false;
      } else {
        exports = window;
        if (typeof cordova !== "undefined" && cordova !== null) {
          exports.authDriver = new Dropbox.AuthDriver.Cordova({
            rememberUser: false
          });
          exports.testXhrServer = null;
        } else {
          exports.authDriver = new Dropbox.AuthDriver.Popup({
            receiverFile: 'oauth_receiver.html',
            rememberUser: false,
            scope: 'helper-popup'
          });
          exports.testXhrServer = Dropbox.AuthDriver.Popup.locationOrigin(exports.location);
        }
      }
    }
    exports.testKeys.__secret = exports.testKeys.secret;
    delete exports.testKeys['secret'];
    exports.testFullDropboxKeys.__secret = exports.testFullDropboxKeys.secret;
    delete exports.testFullDropboxKeys['secret'];
  }

  exports.assert = exports.chai.assert;

  exports.expect = exports.chai.expect;

}).call(this);
