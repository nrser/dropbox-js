// Generated by CoffeeScript 1.9.1
(function() {
  describe('vars at the top of the dropbox.js function', function() {
    beforeEach(function(done) {
      var agent, https, xhr;
      if (!testXhrServer) {
        this.vars = null;
        return done();
      }
      this.node_js = (typeof module !== "undefined" && module !== null) && ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) && (typeof require !== "undefined" && require !== null);
      if (this.node_js) {
        this.XMLHttpRequest = require('xhr2');
        this.oldAgent = this.XMLHttpRequest.nodejsHttpsAgent;
        https = require('https');
        agent = new https.Agent;
        agent.options.rejectUnauthorized = false;
        this.XMLHttpRequest.nodejsSet({
          httpsAgent: agent
        });
      }
      xhr = new Dropbox.Util.Xhr('GET', testXhrServer + '/lib/dropbox.js');
      return xhr.prepare().send((function(_this) {
        return function(error, data) {
          var i, len, line, match, ref, varSection;
          expect(error).not.to.be.ok;
          _this.dropbox_js = data;
          ref = data.split("\n");
          for (i = 0, len = ref.length; i < len; i++) {
            line = ref[i];
            match = /^\s*var(.*)(,|;)$/.exec(line);
            if (!match) {
              continue;
            }
            _this.vars = (function() {
              var j, len1, ref1, results;
              ref1 = match[1].split(',');
              results = [];
              for (j = 0, len1 = ref1.length; j < len1; j++) {
                varSection = ref1[j];
                results.push(varSection.trim().split(' ', 2)[0]);
              }
              return results;
            })();
            break;
          }
          return done();
        };
      })(this));
    });
    afterEach(function() {
      if (this.node_js) {
        return this.XMLHttpRequest.nodejsSet({
          httpsAgent: this.oldAgent
        });
      }
    });
    it('contains Dropbox', function() {
      return expect(this.vars).to.contain('Dropbox');
    });
    return it('only contains Dropbox and Dbx* vars', function() {
      var badVars, i, len, ref, variable;
      badVars = [];
      ref = this.vars;
      for (i = 0, len = ref.length; i < len; i++) {
        variable = ref[i];
        if (variable === 'Dropbox') {
          continue;
        }
        if (/^Dbx[A-Z]/.test(variable)) {
          continue;
        }
        badVars.push(variable);
      }
      return expect(badVars).to.be.empty;
    });
  });

}).call(this);
