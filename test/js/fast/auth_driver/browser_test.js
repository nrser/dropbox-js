// Generated by CoffeeScript 1.9.1
(function() {
  describe('Dropbox.AuthDriver.BrowserBase', function() {
    return describe('#locationStateParam', function() {
      beforeEach(function() {
        return this.stub = sinon.stub(Dropbox.AuthDriver.BrowserBase, 'currentLocation');
      });
      afterEach(function() {
        return this.stub.restore();
      });
      it('returns null if the location does not contain the state', function() {
        var driver;
        this.stub.returns('http://test/file#another_state=ab%20cd&stat=e');
        driver = new Dropbox.AuthDriver.BrowserBase;
        return expect(driver.locationStateParam()).to.equal(null);
      });
      it('returns null if the fragment does not contain the state', function() {
        var driver;
        this.stub.returns('http://test/file?state=decoy#another_state=ab%20cd&stat=e');
        driver = new Dropbox.AuthDriver.BrowserBase;
        return expect(driver.locationStateParam()).to.equal(null);
      });
      it("extracts the state when it is the first fragment param", function() {
        var driver;
        this.stub.returns('http://test/file#state=ab%20cd&other_param=true');
        driver = new Dropbox.AuthDriver.BrowserBase;
        return expect(driver.locationStateParam()).to.equal('ab cd');
      });
      it("extracts the state when it is the last fragment param", function() {
        var driver;
        this.stub.returns('http://test/file#other_param=true&state=ab%20cd');
        driver = new Dropbox.AuthDriver.BrowserBase;
        return expect(driver.locationStateParam()).to.equal('ab cd');
      });
      return it("extracts the state when it is a middle fragment param", function() {
        var driver;
        this.stub.returns('http://test/file#param1=true&state=ab%20cd&param2=true');
        driver = new Dropbox.AuthDriver.BrowserBase;
        return expect(driver.locationStateParam()).to.equal('ab cd');
      });
    });
  });

  describe('Dropbox.AuthDriver.Redirect', function() {
    return describe('#url', function() {
      beforeEach(function() {
        return this.stub = sinon.stub(Dropbox.AuthDriver.BrowserBase, 'currentLocation');
      });
      afterEach(function() {
        return this.stub.restore();
      });
      it('defaults to the current location', function() {
        var driver;
        this.stub.returns('http://test/file?a=true');
        driver = new Dropbox.AuthDriver.Redirect();
        return expect(driver.url()).to.equal('http://test/file?a=true');
      });
      it('removes the fragment from the location', function() {
        var driver;
        this.stub.returns('http://test/file?a=true#deadfragment');
        driver = new Dropbox.AuthDriver.Redirect();
        return expect(driver.url()).to.equal('http://test/file?a=true');
      });
      it('removes tricky fragments from the location', function() {
        var driver;
        this.stub.returns('http://test/file?a=true#/deadfragment');
        driver = new Dropbox.AuthDriver.Redirect();
        return expect(driver.url()).to.equal('http://test/file?a=true');
      });
      it('replaces the current file correctly', function() {
        var driver;
        this.stub.returns('http://test:123/a/path/file?a=true#deadfragment');
        driver = new Dropbox.AuthDriver.Redirect({
          redirectFile: 'another.file'
        });
        return expect(driver.url('oauth token')).to.equal('http://test:123/a/path/another.file');
      });
      it('replaces the current file correctly in the presence of fragments', function() {
        var driver;
        this.stub.returns('http://test:123/a/path/file?a=true#/deadfragment');
        driver = new Dropbox.AuthDriver.Redirect({
          redirectFile: 'another.file'
        });
        return expect(driver.url('oauth token')).to.equal('http://test:123/a/path/another.file');
      });
      it('replaces an entire URL without a query correctly', function() {
        var driver;
        this.stub.returns('http://test/file?a=true');
        driver = new Dropbox.AuthDriver.Redirect({
          redirectUrl: 'https://something.com/filez'
        });
        return expect(driver.url('oauth token')).to.equal('https://something.com/filez');
      });
      return it('replaces an entire URL with a query correctly', function() {
        var driver;
        this.stub.returns('http://test/file?a=true');
        driver = new Dropbox.AuthDriver.Redirect({
          redirectUrl: 'https://something.com/filez?query=param'
        });
        return expect(driver.url('oauth token')).to.equal('https://something.com/filez?query=param');
      });
    });
  });

  describe('Dropbox.AuthDriver.Popup', function() {
    describe('#url', function() {
      beforeEach(function() {
        return this.stub = sinon.stub(Dropbox.AuthDriver.BrowserBase, 'currentLocation');
      });
      afterEach(function() {
        return this.stub.restore();
      });
      it('reflects the current page when there are no options', function() {
        var driver;
        this.stub.returns('http://test:123/a/path/file.htmx');
        driver = new Dropbox.AuthDriver.Popup;
        return expect(driver.url('oauth token')).to.equal('http://test:123/a/path/file.htmx');
      });
      it('replaces the current file correctly', function() {
        var driver;
        this.stub.returns('http://test:123/a/path/file.htmx');
        driver = new Dropbox.AuthDriver.Popup({
          receiverFile: 'another.file'
        });
        return expect(driver.url('oauth token')).to.equal('http://test:123/a/path/another.file');
      });
      it('replaces the current file correctly in the presence of fragments', function() {
        var driver;
        this.stub.returns('http://test:123/a/path/file.htmx#/deadfragment');
        driver = new Dropbox.AuthDriver.Popup({
          receiverFile: 'another.file'
        });
        return expect(driver.url('oauth token')).to.equal('http://test:123/a/path/another.file');
      });
      it('replaces the current file correctly in the presence of queries', function() {
        var driver;
        this.stub.returns('http://test:123/a/path/file.htmx?p/aram=true');
        driver = new Dropbox.AuthDriver.Popup({
          receiverFile: 'another.file'
        });
        return expect(driver.url('oauth token')).to.equal('http://test:123/a/path/another.file');
      });
      it('replaces an entire URL without a query correctly', function() {
        var driver;
        this.stub.returns('http://test:123/a/path/file.htmx');
        driver = new Dropbox.AuthDriver.Popup({
          receiverUrl: 'https://something.com/filez'
        });
        return expect(driver.url('oauth token')).to.equal('https://something.com/filez');
      });
      return it('replaces an entire URL with a query correctly', function() {
        var driver;
        this.stub.returns('http://test:123/a/path/file.htmx');
        driver = new Dropbox.AuthDriver.Popup({
          receiverUrl: 'https://something.com/filez?query=param'
        });
        return expect(driver.url('oauth token')).to.equal('https://something.com/filez?query=param');
      });
    });
    return describe('#locationOrigin', function() {
      var i, len, results, testCase, testCases;
      testCases = [['http://www.dropbox.com', 'http://www.dropbox.com'], ['http://www.dropbox.com/', 'http://www.dropbox.com'], ['http://www.dropbox.com/path', 'http://www.dropbox.com'], ['http://www.dropbox.com?query=true', 'http://www.dropbox.com'], ['http://www.dropbox.com#hash=true', 'http://www.dropbox.com'], ['http://www.dropbox.com/?query=true', 'http://www.dropbox.com'], ['http://www.dropbox.com/#hash', 'http://www.dropbox.com'], ['http://www.dropbox.com/path?query=true', 'http://www.dropbox.com'], ['http://www.dropbox.com/path#hash', 'http://www.dropbox.com'], ['https://www.dropbox.com/', 'https://www.dropbox.com'], ['http://www.dropbox.com:80', 'http://www.dropbox.com:80'], ['http://www.dropbox.com:80/', 'http://www.dropbox.com:80'], ['file://some_file', 'file://some_file'], ['file://path/to/file', 'file://path/to/file'], ['file://path/to/file?query=true', 'file://path/to/file'], ['file://path/to/file#fragment', 'file://path/to/file']];
      results = [];
      for (i = 0, len = testCases.length; i < len; i++) {
        testCase = testCases[i];
        results.push((function(testCase) {
          return it("works for " + testCase[0], function() {
            return expect(Dropbox.AuthDriver.Popup.locationOrigin(testCase[0])).to.equal(testCase[1]);
          });
        })(testCase));
      }
      return results;
    });
  });

}).call(this);
