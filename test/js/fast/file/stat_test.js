// Generated by CoffeeScript 1.9.1
(function() {
  describe('Dropbox.File.Stat', function() {
    return describe('.parse', function() {
      describe('on the API file example', function() {
        beforeEach(function() {
          var metadata;
          metadata = {
            "size": "225.4KB",
            "rev": "35e97029684fe",
            "thumb_exists": true,
            "bytes": 230783,
            "modified": "Tue, 19 Jul 2011 21:55:38 +0000",
            "client_mtime": "Mon, 18 Jul 2011 18:04:35 +0000",
            "path": "/Getting_Started.pdf",
            "is_dir": false,
            "icon": "page_white_acrobat",
            "root": "app_folder",
            "mime_type": "application/pdf",
            "revision": 220823
          };
          return this.stat = Dropbox.File.Stat.parse(metadata);
        });
        it('parses the path correctly', function() {
          expect(this.stat).to.have.property('path');
          return expect(this.stat.path).to.equal('/Getting_Started.pdf');
        });
        it('parses name correctly', function() {
          expect(this.stat).to.have.property('name');
          return expect(this.stat.name).to.equal('Getting_Started.pdf');
        });
        it('parses inAppFolder corectly', function() {
          expect(this.stat).to.have.property('inAppFolder');
          return expect(this.stat.inAppFolder).to.equal(true);
        });
        it('parses isFolder correctly', function() {
          expect(this.stat).to.have.property('isFolder');
          expect(this.stat.isFolder).to.equal(false);
          expect(this.stat).to.have.property('isFile');
          return expect(this.stat.isFile).to.equal(true);
        });
        it('parses isRemoved correctly', function() {
          expect(this.stat).to.have.property('isRemoved');
          return expect(this.stat.isRemoved).to.equal(false);
        });
        it('parses typeIcon correctly', function() {
          expect(this.stat).to.have.property('typeIcon');
          return expect(this.stat.typeIcon).to.equal('page_white_acrobat');
        });
        it('parses versionTag correctly', function() {
          expect(this.stat).to.have.property('versionTag');
          return expect(this.stat.versionTag).to.equal('35e97029684fe');
        });
        it('handles the lack of contentHash correctly', function() {
          expect(this.stat).to.have.property('contentHash');
          return expect(this.stat.contentHash).to.equal(null);
        });
        it('parses mimeType correctly', function() {
          expect(this.stat).to.have.property('mimeType');
          return expect(this.stat.mimeType).to.equal('application/pdf');
        });
        it('parses size correctly', function() {
          expect(this.stat).to.have.property('size');
          return expect(this.stat.size).to.equal(230783);
        });
        it('parses humanSize correctly', function() {
          expect(this.stat).to.have.property('humanSize');
          return expect(this.stat.humanSize).to.equal("225.4KB");
        });
        it('parses hasThumbnail correctly', function() {
          expect(this.stat).to.have.property('hasThumbnail');
          return expect(this.stat.hasThumbnail).to.equal(true);
        });
        it('parses modifiedAt correctly', function() {
          expect(this.stat).to.have.property('modifiedAt');
          expect(this.stat.modifiedAt).to.be.instanceOf(Date);
          return expect(['Tue, 19 Jul 2011 21:55:38 GMT', 'Tue, 19 Jul 2011 21:55:38 UTC']).to.contain(this.stat.modifiedAt.toUTCString());
        });
        it('parses clientModifiedAt correctly', function() {
          expect(this.stat).to.have.property('clientModifiedAt');
          expect(this.stat.clientModifiedAt).to.be.instanceOf(Date);
          return expect(['Mon, 18 Jul 2011 18:04:35 GMT', 'Mon, 18 Jul 2011 18:04:35 UTC']).to.contain(this.stat.clientModifiedAt.toUTCString());
        });
        it('round-trips through toJSON / parse correctly', function() {
          var newStat;
          newStat = Dropbox.File.Stat.parse(this.stat.toJSON());
          return expect(newStat).to.deep.equal(this.stat);
        });
        it('round-trips through JSON.{stringify, parse} / parse correctly', function() {
          var newStat;
          newStat = Dropbox.File.Stat.parse(JSON.parse(JSON.stringify(this.stat)));
          return expect(newStat).to.deep.equal(this.stat);
        });
        return it('supports deprecated json()', function() {
          return expect(this.stat.toJSON()).to.deep.equal(this.stat.json());
        });
      });
      describe('on the API directory example', function() {
        beforeEach(function() {
          var metadata;
          metadata = {
            "size": "0 bytes",
            "hash": "37eb1ba1849d4b0fb0b28caf7ef3af52",
            "bytes": 0,
            "thumb_exists": false,
            "rev": "714f029684fe",
            "modified": "Wed, 27 Apr 2011 22:18:51 +0000",
            "path": "/Public",
            "is_dir": true,
            "is_deleted": true,
            "icon": "folder_public",
            "root": "dropbox",
            "revision": 29007
          };
          return this.stat = Dropbox.File.Stat.parse(metadata);
        });
        it('parses path correctly', function() {
          expect(this.stat).to.have.property('path');
          return expect(this.stat.path).to.equal('/Public');
        });
        it('parses name correctly', function() {
          expect(this.stat).to.have.property('name');
          return expect(this.stat.name).to.equal('Public');
        });
        it('parses inAppFolder corectly', function() {
          expect(this.stat).to.have.property('inAppFolder');
          return expect(this.stat.inAppFolder).to.equal(false);
        });
        it('parses isFolder correctly', function() {
          expect(this.stat).to.have.property('isFolder');
          expect(this.stat.isFolder).to.equal(true);
          expect(this.stat).to.have.property('isFile');
          return expect(this.stat.isFile).to.equal(false);
        });
        it('parses isRemoved correctly', function() {
          expect(this.stat).to.have.property('isRemoved');
          return expect(this.stat.isRemoved).to.equal(true);
        });
        it('parses typeIcon correctly', function() {
          expect(this.stat).to.have.property('typeIcon');
          return expect(this.stat.typeIcon).to.equal('folder_public');
        });
        it('parses versionTag correctly', function() {
          expect(this.stat).to.have.property('versionTag');
          return expect(this.stat.versionTag).to.equal('714f029684fe');
        });
        it('parses contentHash correctly', function() {
          expect(this.stat).to.have.property('contentHash');
          return expect(this.stat.contentHash).to.equal('37eb1ba1849d4b0fb0b28caf7ef3af52');
        });
        it('parses mimeType correctly', function() {
          expect(this.stat).to.have.property('mimeType');
          return expect(this.stat.mimeType).to.equal('inode/directory');
        });
        it('parses size correctly', function() {
          expect(this.stat).to.have.property('size');
          return expect(this.stat.size).to.equal(0);
        });
        it('parses humanSize correctly', function() {
          expect(this.stat).to.have.property('humanSize');
          return expect(this.stat.humanSize).to.equal('0 bytes');
        });
        it('parses hasThumbnail correctly', function() {
          expect(this.stat).to.have.property('hasThumbnail');
          return expect(this.stat.hasThumbnail).to.equal(false);
        });
        it('parses modifiedAt correctly', function() {
          expect(this.stat).to.have.property('modifiedAt');
          expect(this.stat.modifiedAt).to.be.instanceOf(Date);
          return expect(['Wed, 27 Apr 2011 22:18:51 GMT', 'Wed, 27 Apr 2011 22:18:51 UTC']).to.contain(this.stat.modifiedAt.toUTCString());
        });
        it('parses missing clientModifiedAt correctly', function() {
          expect(this.stat).to.have.property('clientModifiedAt');
          return expect(this.stat.clientModifiedAt).to.equal(null);
        });
        it('round-trips through toJSON / parse correctly', function() {
          var newStat;
          newStat = Dropbox.File.Stat.parse(this.stat.toJSON());
          return expect(newStat).to.deep.equal(this.stat);
        });
        return it('round-trips through JSON.{stringify, parse} / parse correctly', function() {
          var newStat;
          newStat = Dropbox.File.Stat.parse(JSON.parse(JSON.stringify(this.stat)));
          return expect(newStat).to.deep.equal(this.stat);
        });
      });
      it('passes null through', function() {
        return expect(Dropbox.File.Stat.parse(null)).to.equal(null);
      });
      it('passes undefined through', function() {
        return expect(Dropbox.File.Stat.parse(void 0)).to.equal(void 0);
      });
      return describe('on a contrived file/path example', function() {
        beforeEach(function() {
          var metadata;
          metadata = {
            "size": "225.4KB",
            "rev": "35e97029684fe",
            "thumb_exists": true,
            "bytes": 230783,
            "modified": "Tue, 19 Jul 2011 21:55:38 +0000",
            "client_mtime": "Mon, 18 Jul 2011 18:04:35 +0000",
            "path": "path/to/a/file/named/Getting_Started.pdf/",
            "is_dir": false,
            "icon": "page_white_acrobat",
            "root": "app_folder",
            "mime_type": "application/pdf",
            "revision": 220823
          };
          return this.stat = Dropbox.File.Stat.parse(metadata);
        });
        it('parses the path correctly', function() {
          expect(this.stat).to.have.property('path');
          return expect(this.stat.path).to.equal('/path/to/a/file/named/Getting_Started.pdf');
        });
        it('parses name correctly', function() {
          expect(this.stat).to.have.property('name');
          return expect(this.stat.name).to.equal('Getting_Started.pdf');
        });
        it('round-trips through toJSON / parse correctly', function() {
          var newStat;
          newStat = Dropbox.File.Stat.parse(this.stat.toJSON());
          return expect(newStat).to.deep.equal(this.stat);
        });
        return it('round-trips through JSON.{stringify, parse} / parse correctly', function() {
          var newStat;
          newStat = Dropbox.File.Stat.parse(JSON.parse(JSON.stringify(this.stat)));
          return expect(newStat).to.deep.equal(this.stat);
        });
      });
    });
  });

}).call(this);
