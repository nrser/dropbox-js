// Generated by CoffeeScript 1.9.1
(function() {
  describe('Dropbox.File.ShareUrl', function() {
    return describe('.parse', function() {
      describe('on the /shares API example', function() {
        beforeEach(function() {
          var urlData;
          urlData = {
            "url": "http://db.tt/APqhX1",
            "expires": "Tue, 01 Jan 2030 00:00:00 +0000"
          };
          return this.url = Dropbox.File.ShareUrl.parse(urlData, false);
        });
        it('parses url correctly', function() {
          expect(this.url).to.have.property('url');
          return expect(this.url.url).to.equal('http://db.tt/APqhX1');
        });
        it('parses expiresAt correctly', function() {
          expect(this.url).to.have.property('expiresAt');
          expect(this.url.expiresAt).to.be.instanceOf(Date);
          return expect(['Tue, 01 Jan 2030 00:00:00 GMT', 'Tue, 1 Jan 2030 00:00:00 UTC']).to.contain(this.url.expiresAt.toUTCString());
        });
        it('parses isDirect correctly', function() {
          expect(this.url).to.have.property('isDirect');
          return expect(this.url.isDirect).to.equal(false);
        });
        it('parses isPreview correctly', function() {
          expect(this.url).to.have.property('isPreview');
          return expect(this.url.isPreview).to.equal(true);
        });
        it('round-trips through toJSON / parse correctly', function() {
          var newUrl;
          newUrl = Dropbox.File.ShareUrl.parse(this.url.toJSON());
          newUrl.toJSON();
          return expect(newUrl).to.deep.equal(this.url);
        });
        it('round-trips through JSON.{stringify, parse} / parse correctly', function() {
          var newUrl;
          newUrl = Dropbox.File.ShareUrl.parse(JSON.parse(JSON.stringify(this.url)));
          newUrl.toJSON();
          return expect(newUrl).to.deep.equal(this.url);
        });
        return it('supports deprecated json()', function() {
          return expect(this.url.toJSON()).to.deep.equal(this.url.json());
        });
      });
      it('passes null through', function() {
        return expect(Dropbox.File.ShareUrl.parse(null)).to.equal(null);
      });
      return it('passes undefined through', function() {
        return expect(Dropbox.File.ShareUrl.parse(void 0)).to.equal(void 0);
      });
    });
  });

  describe('Dropbox.File.CopyReference', function() {
    return describe('.parse', function() {
      describe('on the API example', function() {
        beforeEach(function() {
          var refData;
          refData = {
            "copy_ref": "z1X6ATl6aWtzOGq0c3g5Ng",
            "expires": "Fri, 31 Jan 2042 21:01:05 +0000"
          };
          return this.ref = Dropbox.File.CopyReference.parse(refData);
        });
        it('parses tag correctly', function() {
          expect(this.ref).to.have.property('tag');
          return expect(this.ref.tag).to.equal('z1X6ATl6aWtzOGq0c3g5Ng');
        });
        it('parses expiresAt correctly', function() {
          expect(this.ref).to.have.property('expiresAt');
          expect(this.ref.expiresAt).to.be.instanceOf(Date);
          return expect(['Fri, 31 Jan 2042 21:01:05 GMT', 'Fri, 31 Jan 2042 21:01:05 UTC']).to.contain(this.ref.expiresAt.toUTCString());
        });
        it('round-trips through toJSON / parse correctly', function() {
          var newRef;
          newRef = Dropbox.File.CopyReference.parse(this.ref.json());
          return expect(newRef).to.deep.equal(this.ref);
        });
        it('round-trips through JSON.{stringify, parse} / parse correctly', function() {
          var newRef;
          newRef = Dropbox.File.CopyReference.parse(JSON.parse(JSON.stringify(this.ref)));
          return expect(newRef).to.deep.equal(this.ref);
        });
        return it('supports deprecated json()', function() {
          return expect(this.ref.toJSON()).to.deep.equal(this.ref.json());
        });
      });
      describe('on a reference string', function() {
        beforeEach(function() {
          var rawRef;
          rawRef = 'z1X6ATl6aWtzOGq0c3g5Ng';
          return this.ref = Dropbox.File.CopyReference.parse(rawRef);
        });
        it('parses tag correctly', function() {
          expect(this.ref).to.have.property('tag');
          return expect(this.ref.tag).to.equal('z1X6ATl6aWtzOGq0c3g5Ng');
        });
        it('parses expiresAt correctly', function() {
          expect(this.ref).to.have.property('expiresAt');
          expect(this.ref.expiresAt).to.be.instanceOf(Date);
          return expect(this.ref.expiresAt - (new Date())).to.be.below(1000);
        });
        it('round-trips through toJSON / parse correctly', function() {
          var newRef;
          newRef = Dropbox.File.CopyReference.parse(this.ref.toJSON());
          return expect(newRef).to.deep.equal(this.ref);
        });
        return it('round-trips through JSON.{stringify, parse} / parse correctly', function() {
          var newRef;
          newRef = Dropbox.File.CopyReference.parse(JSON.parse(JSON.stringify(this.ref)));
          return expect(newRef).to.deep.equal(this.ref);
        });
      });
      it('passes null through', function() {
        return expect(Dropbox.File.CopyReference.parse(null)).to.equal(null);
      });
      return it('passes undefined through', function() {
        return expect(Dropbox.File.CopyReference.parse(void 0)).to.equal(void 0);
      });
    });
  });

}).call(this);
