// Generated by CoffeeScript 1.9.1
(function() {
  describe('Dropbox.Util.Oauth', function() {
    var buildKeylessTransitionTests, buildSecretTransitionTests, buildSecretlessTransitionTests;
    beforeEach(function() {
      this.method = 'GET';
      this.url = '/photos';
      this.params = {
        answer: 42,
        other: 43
      };
      return this.timestamp = 1370129543574;
    });
    buildSecretlessTransitionTests = function() {
      describe('#setAuthStateParam', function() {
        beforeEach(function() {
          return this.oauth.setAuthStateParam('oauth-state');
        });
        it('makes #step return PARAM_SET', function() {
          return expect(this.oauth.step()).to.equal(Dropbox.Client.PARAM_SET);
        });
        return it('adds the param to credentials', function() {
          return expect(this.oauth.credentials()).to.deep.equal({
            key: 'client-id',
            oauthStateParam: 'oauth-state'
          });
        });
      });
      describe('#processRedirectParams', function() {
        it('returns true when the query params contain a code', function() {
          return expect(this.oauth.processRedirectParams({
            code: 'authorization-code'
          })).to.equal(true);
        });
        it('returns true when the query params contain a token', function() {
          return expect(this.oauth.processRedirectParams({
            token_type: 'Bearer',
            access_token: 'access-token'
          })).to.equal(true);
        });
        it('returns true when the query params contain a error', function() {
          return expect(this.oauth.processRedirectParams({
            error: 'access_denied'
          })).to.equal(true);
        });
        it('throws an exception on unimplemented token types', function() {
          return expect((function(_this) {
            return function() {
              return _this.oauth.processRedirectParams({
                token_type: 'unimplemented'
              });
            };
          })(this)).to["throw"](Error, /unimplemented token/i);
        });
        it("returns false when the query params don't contain a code/token", function() {
          return expect(this.oauth.processRedirectParams({
            random_param: 'random'
          })).to.equal(false);
        });
        describe('with an authorization code', function() {
          beforeEach(function() {
            return this.oauth.processRedirectParams({
              code: 'authorization-code'
            });
          });
          it('makes #step return AUTHORIZED', function() {
            return expect(this.oauth.step()).to.equal(Dropbox.Client.AUTHORIZED);
          });
          return it('adds the code to credentials', function() {
            return expect(this.oauth.credentials()).to.deep.equal({
              key: 'client-id',
              oauthCode: 'authorization-code'
            });
          });
        });
        describe('with a Bearer token', function() {
          beforeEach(function() {
            return this.oauth.processRedirectParams({
              token_type: 'Bearer',
              access_token: 'bearer-token'
            });
          });
          it('makes #step return DONE', function() {
            return expect(this.oauth.step()).to.equal(Dropbox.Client.DONE);
          });
          return it('adds the token to credentials', function() {
            return expect(this.oauth.credentials()).to.deep.equal({
              key: 'client-id',
              token: 'bearer-token'
            });
          });
        });
        describe('with a MAC token', function() {
          beforeEach(function() {
            return this.oauth.processRedirectParams({
              token_type: 'mac',
              access_token: 'mac-token',
              kid: 'mac-server-kid',
              mac_key: 'mac-token-key',
              mac_algorithm: 'hmac-sha-1'
            });
          });
          it('makes #step() return DONE', function() {
            return expect(this.oauth.step()).to.equal(Dropbox.Client.DONE);
          });
          return it('adds the token to credentials', function() {
            return expect(this.oauth.credentials()).to.deep.equal({
              key: 'client-id',
              token: 'mac-token',
              tokenKid: 'mac-server-kid',
              tokenKey: 'mac-token-key'
            });
          });
        });
        describe('with an OAuth error response', function() {
          beforeEach(function() {
            return this.oauth.processRedirectParams({
              error: 'access_denied',
              error_description: "The application didn't seem trustworthy"
            });
          });
          it('makes #step() return ERROR', function() {
            return expect(this.oauth.step()).to.equal(Dropbox.Client.ERROR);
          });
          it('preserves the api key in the credentials', function() {
            return expect(this.oauth.credentials()).to.deep.equal({
              key: 'client-id'
            });
          });
          it('makes #error() return the error', function() {
            var error;
            error = this.oauth.error();
            expect(error).to.be.instanceOf(Dropbox.AuthError);
            expect(error.code).to.equal(Dropbox.AuthError.ACCESS_DENIED);
            return expect(error.description).to.equal("The application didn't seem trustworthy");
          });
          return it('lets #reset() return to RESET', function() {
            this.oauth.reset();
            return expect(this.oauth.step()).to.equal(Dropbox.Client.RESET);
          });
        });
        return describe('without a code or token', function() {
          beforeEach(function() {
            this.oldStep = this.oauth.step();
            return this.oauth.processRedirectParams({
              random_param: 'random'
            });
          });
          return it('does not change the auth step', function() {
            return expect(this.oauth.step()).to.equal(this.oldStep);
          });
        });
      });
      return describe('#reset', function() {
        beforeEach(function() {
          return this.oauth.reset();
        });
        return it('makes #step() return RESET', function() {
          return expect(this.oauth.step()).to.equal(Dropbox.Client.RESET);
        });
      });
    };
    buildSecretTransitionTests = function() {
      describe('#setAuthStateParam', function() {
        beforeEach(function() {
          return this.oauth.setAuthStateParam('oauth-state');
        });
        it('makes #step return PARAM_SET', function() {
          return expect(this.oauth.step()).to.equal(Dropbox.Client.PARAM_SET);
        });
        return it('adds the param to credentials', function() {
          return expect(this.oauth.credentials()).to.deep.equal({
            key: 'client-id',
            secret: 'client-secret',
            oauthStateParam: 'oauth-state'
          });
        });
      });
      describe('#processRedirectParams', function() {
        it('returns true when the query params contain a code', function() {
          return expect(this.oauth.processRedirectParams({
            code: 'authorization-code'
          })).to.equal(true);
        });
        it('returns true when the query params contain a token', function() {
          return expect(this.oauth.processRedirectParams({
            token_type: 'Bearer',
            access_token: 'access-token'
          })).to.equal(true);
        });
        it('returns true when the query params contain a error', function() {
          return expect(this.oauth.processRedirectParams({
            error: 'access_denied'
          })).to.equal(true);
        });
        it('throws an exception on unimplemented token types', function() {
          return expect((function(_this) {
            return function() {
              return _this.oauth.processRedirectParams({
                token_type: 'unimplemented'
              });
            };
          })(this)).to["throw"](Error, /unimplemented token/i);
        });
        it("returns false when the query params don't contain a code/token", function() {
          return expect(this.oauth.processRedirectParams({
            random_param: 'random'
          })).to.equal(false);
        });
        describe('with an authorization code', function() {
          beforeEach(function() {
            return this.oauth.processRedirectParams({
              code: 'authorization-code'
            });
          });
          it('makes #step return AUTHORIZED', function() {
            return expect(this.oauth.step()).to.equal(Dropbox.Client.AUTHORIZED);
          });
          return it('adds the code to credentials', function() {
            return expect(this.oauth.credentials()).to.deep.equal({
              key: 'client-id',
              secret: 'client-secret',
              oauthCode: 'authorization-code'
            });
          });
        });
        describe('with a Bearer token', function() {
          beforeEach(function() {
            return this.oauth.processRedirectParams({
              token_type: 'Bearer',
              access_token: 'bearer-token'
            });
          });
          it('makes #step return DONE', function() {
            return expect(this.oauth.step()).to.equal(Dropbox.Client.DONE);
          });
          return it('adds the token to credentials', function() {
            return expect(this.oauth.credentials()).to.deep.equal({
              key: 'client-id',
              secret: 'client-secret',
              token: 'bearer-token'
            });
          });
        });
        describe('with a MAC token', function() {
          beforeEach(function() {
            return this.oauth.processRedirectParams({
              token_type: 'mac',
              access_token: 'mac-token',
              kid: 'mac-server-kid',
              mac_key: 'mac-token-key',
              mac_algorithm: 'hmac-sha-1'
            });
          });
          it('makes #step return DONE', function() {
            return expect(this.oauth.step()).to.equal(Dropbox.Client.DONE);
          });
          return it('adds the token to credentials', function() {
            return expect(this.oauth.credentials()).to.deep.equal({
              key: 'client-id',
              secret: 'client-secret',
              token: 'mac-token',
              tokenKid: 'mac-server-kid',
              tokenKey: 'mac-token-key'
            });
          });
        });
        describe('with an OAuth error response', function() {
          beforeEach(function() {
            return this.oauth.processRedirectParams({
              error: 'access_denied',
              error_description: "The application didn't seem trustworthy"
            });
          });
          it('makes #step() return ERROR', function() {
            return expect(this.oauth.step()).to.equal(Dropbox.Client.ERROR);
          });
          it('preserves the app key and secret in the credentials', function() {
            return expect(this.oauth.credentials()).to.deep.equal({
              key: 'client-id',
              secret: 'client-secret'
            });
          });
          return it('lets #reset() return to RESET', function() {
            this.oauth.reset();
            return expect(this.oauth.step()).to.equal(Dropbox.Client.RESET);
          });
        });
        return describe('without a code or token', function() {
          beforeEach(function() {
            this.oldStep = this.oauth.step();
            return this.oauth.processRedirectParams({
              random_param: 'random'
            });
          });
          return it('does not change the step', function() {
            return expect(this.oauth.step()).to.equal(this.oldStep);
          });
        });
      });
      return describe('#reset', function() {
        beforeEach(function() {
          return this.oauth.reset();
        });
        return it('makes #step() return RESET', function() {
          return expect(this.oauth.step()).to.equal(Dropbox.Client.RESET);
        });
      });
    };
    buildKeylessTransitionTests = function() {
      describe('#setAuthStateParam', function() {
        return it('throws an exception', function() {
          return expect((function(_this) {
            return function() {
              return _this.oauth.setAuthStateParam('oauth-state');
            };
          })(this)).to["throw"](Error, /no api key/i);
        });
      });
      describe('#processRedirectParams', function() {
        it('throws an exception when the query params contain a code', function() {
          return expect((function(_this) {
            return function() {
              return _this.oauth.processRedirectParams({
                code: 'authorization-code'
              });
            };
          })(this)).to["throw"](Error, /no api key/i);
        });
        it('returns true when the query params contain a token', function() {
          return expect(this.oauth.processRedirectParams({
            token_type: 'Bearer',
            access_token: 'access-token'
          })).to.equal(true);
        });
        it('throws an exeception when the query params contain a error', function() {
          return expect((function(_this) {
            return function() {
              return _this.oauth.processRedirectParams({
                error: 'access_denied'
              });
            };
          })(this)).to["throw"](Error, /no api key/i);
        });
        it('throws an exception on unimplemented token types', function() {
          return expect((function(_this) {
            return function() {
              return _this.oauth.processRedirectParams({
                token_type: 'unimplemented'
              });
            };
          })(this)).to["throw"](Error, /unimplemented token/i);
        });
        it("returns false when the query params don't contain a code/token", function() {
          return expect(this.oauth.processRedirectParams({
            random_param: 'random'
          })).to.equal(false);
        });
        describe('with a Bearer token', function() {
          beforeEach(function() {
            return this.oauth.processRedirectParams({
              token_type: 'Bearer',
              access_token: 'bearer-token'
            });
          });
          it('makes #step return DONE', function() {
            return expect(this.oauth.step()).to.equal(Dropbox.Client.DONE);
          });
          return it('adds the token to credentials', function() {
            return expect(this.oauth.credentials()).to.deep.equal({
              token: 'bearer-token'
            });
          });
        });
        describe('with a MAC token', function() {
          beforeEach(function() {
            return this.oauth.processRedirectParams({
              token_type: 'mac',
              access_token: 'mac-token',
              kid: 'mac-server-kid',
              mac_key: 'mac-token-key',
              mac_algorithm: 'hmac-sha-1'
            });
          });
          it('makes #step() return DONE', function() {
            return expect(this.oauth.step()).to.equal(Dropbox.Client.DONE);
          });
          return it('adds the token to credentials', function() {
            return expect(this.oauth.credentials()).to.deep.equal({
              token: 'mac-token',
              tokenKid: 'mac-server-kid',
              tokenKey: 'mac-token-key'
            });
          });
        });
        return describe('without a code or token', function() {
          beforeEach(function() {
            this.oldStep = this.oauth.step();
            return this.oauth.processRedirectParams({
              random_param: 'random'
            });
          });
          return it('does not change the auth step', function() {
            return expect(this.oauth.step()).to.equal(this.oldStep);
          });
        });
      });
      return describe('#reset', function() {
        beforeEach(function() {
          return this.oauth.reset();
        });
        return it('makes #step() return RESET', function() {
          return expect(this.oauth.step()).to.equal(Dropbox.Client.RESET);
        });
      });
    };
    describe('with an app key', function() {
      beforeEach(function() {
        return this.oauth = new Dropbox.Util.Oauth({
          key: 'client-id'
        });
      });
      describe('#credentials', function() {
        return it('returns the app key', function() {
          return expect(this.oauth.credentials()).to.deep.equal({
            key: 'client-id'
          });
        });
      });
      describe('#step', function() {
        return it('returns RESET', function() {
          return expect(this.oauth.step()).to.equal(Dropbox.Client.RESET);
        });
      });
      describe('#authHeader', function() {
        return it('uses HTTP Basic authentication with the client id and no pw', function() {
          return expect(this.oauth.authHeader(this.method, this.url, this.params)).to.equal('Basic Y2xpZW50LWlkOg==');
        });
      });
      describe('#addAuthParams', function() {
        it('returns the given object', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.equal(this.params);
        });
        return it('adds the client id', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.deep.equal({
            client_id: 'client-id',
            answer: 42,
            other: 43
          });
        });
      });
      describe('#checkAuthStateParam', function() {
        return it('returns false for null', function() {
          return expect(this.oauth.checkAuthStateParam(null)).to.equal(false);
        });
      });
      return buildSecretlessTransitionTests();
    });
    describe('with an app key and secret', function() {
      beforeEach(function() {
        return this.oauth = new Dropbox.Util.Oauth({
          key: 'client-id',
          secret: 'client-secret'
        });
      });
      describe('#credentials', function() {
        return it('returns the app key', function() {
          return expect(this.oauth.credentials()).to.deep.equal({
            key: 'client-id',
            secret: 'client-secret'
          });
        });
      });
      describe('#step', function() {
        return it('returns RESET', function() {
          return expect(this.oauth.step()).to.equal(Dropbox.Client.RESET);
        });
      });
      describe('#authHeader', function() {
        return it('uses HTTP Basic authentication with the client id and secret', function() {
          return expect(this.oauth.authHeader(this.method, this.url, this.params)).to.equal('Basic Y2xpZW50LWlkOmNsaWVudC1zZWNyZXQ=');
        });
      });
      describe('#addAuthParams', function() {
        it('returns the given object', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.equal(this.params);
        });
        return it('adds the client id', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.deep.equal({
            client_id: 'client-id',
            client_secret: 'client-secret',
            answer: 42,
            other: 43
          });
        });
      });
      describe('#checkAuthStateParam', function() {
        return it('returns false for null', function() {
          return expect(this.oauth.checkAuthStateParam(null)).to.equal(false);
        });
      });
      return buildSecretTransitionTests();
    });
    describe('with an app key and state param', function() {
      beforeEach(function() {
        return this.oauth = new Dropbox.Util.Oauth({
          key: 'client-id',
          oauthStateParam: 'oauth-state'
        });
      });
      describe('#credentials', function() {
        return it('returns the app key and state param', function() {
          return expect(this.oauth.credentials()).to.deep.equal({
            key: 'client-id',
            oauthStateParam: 'oauth-state'
          });
        });
      });
      describe('#step', function() {
        return it('returns PARAM_LOADED', function() {
          return expect(this.oauth.step()).to.equal(Dropbox.Client.PARAM_LOADED);
        });
      });
      describe('#checkAuthStateParam', function() {
        it('returns true for the correct param', function() {
          return expect(this.oauth.checkAuthStateParam('oauth-state')).to.equal(true);
        });
        it('returns false for the wrong param', function() {
          return expect(this.oauth.checkAuthStateParam('not-oauth-state')).to.equal(false);
        });
        return it('returns false for null', function() {
          return expect(this.oauth.checkAuthStateParam(null)).to.equal(false);
        });
      });
      describe('#authorizeUrlParams', function() {
        beforeEach(function() {
          return this.url = 'http://redirect.to/here';
        });
        describe('with token responseType', function() {
          return it('asks for an access token', function() {
            return expect(this.oauth.authorizeUrlParams('token', this.url)).to.deep.equal({
              client_id: 'client-id',
              state: 'oauth-state',
              response_type: 'token',
              redirect_uri: this.url
            });
          });
        });
        describe('with code responseType', function() {
          return it('asks for an authorization code', function() {
            return expect(this.oauth.authorizeUrlParams('code', this.url)).to.deep.equal({
              client_id: 'client-id',
              state: 'oauth-state',
              response_type: 'code',
              redirect_uri: this.url
            });
          });
        });
        return describe('with an un-implemented responseType', function() {
          return it('throws an Error', function() {
            return expect((function(_this) {
              return function() {
                return _this.oauth.authorizeUrlParams('other', _this.url);
              };
            })(this)).to["throw"](Error, /unimplemented .* response type/i);
          });
        });
      });
      describe('#authHeader', function() {
        return it('uses HTTP Basic authentication with the client id and no pw', function() {
          return expect(this.oauth.authHeader(this.method, this.url, this.params)).to.equal('Basic Y2xpZW50LWlkOg==');
        });
      });
      describe('#addAuthParams', function() {
        it('returns the given object', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.equal(this.params);
        });
        return it('adds the client id', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.deep.equal({
            client_id: 'client-id',
            answer: 42,
            other: 43
          });
        });
      });
      return buildSecretlessTransitionTests();
    });
    describe('with an app key + secret and state param', function() {
      beforeEach(function() {
        return this.oauth = new Dropbox.Util.Oauth({
          key: 'client-id',
          secret: 'client-secret',
          oauthStateParam: 'oauth-state'
        });
      });
      describe('#credentials', function() {
        return it('returns the app key + secret and state param', function() {
          return expect(this.oauth.credentials()).to.deep.equal({
            key: 'client-id',
            secret: 'client-secret',
            oauthStateParam: 'oauth-state'
          });
        });
      });
      describe('#step', function() {
        return it('returns PARAM_LOADED', function() {
          return expect(this.oauth.step()).to.equal(Dropbox.Client.PARAM_LOADED);
        });
      });
      describe('#checkAuthStateParam', function() {
        it('returns true for the correct param', function() {
          return expect(this.oauth.checkAuthStateParam('oauth-state')).to.equal(true);
        });
        it('returns false for the wrong param', function() {
          return expect(this.oauth.checkAuthStateParam('not-oauth-state')).to.equal(false);
        });
        return it('returns false for null', function() {
          return expect(this.oauth.checkAuthStateParam(null)).to.equal(false);
        });
      });
      describe('#authorizeUrlParams', function() {
        beforeEach(function() {
          return this.url = 'http://redirect.to/here';
        });
        describe('with token responseType', function() {
          return it('asks for an access token', function() {
            return expect(this.oauth.authorizeUrlParams('token', this.url)).to.deep.equal({
              client_id: 'client-id',
              state: 'oauth-state',
              response_type: 'token',
              redirect_uri: this.url
            });
          });
        });
        describe('with code responseType', function() {
          return it('asks for an authorization code', function() {
            return expect(this.oauth.authorizeUrlParams('code', this.url)).to.deep.equal({
              client_id: 'client-id',
              state: 'oauth-state',
              response_type: 'code',
              redirect_uri: this.url
            });
          });
        });
        return describe('with an un-implemented responseType', function() {
          return it('throws an Error', function() {
            return expect((function(_this) {
              return function() {
                return _this.oauth.authorizeUrlParams('other', _this.url);
              };
            })(this)).to["throw"](Error, /unimplemented .* response type/i);
          });
        });
      });
      describe('#authHeader', function() {
        return it('uses HTTP Basic authentication with the id as the username', function() {
          return expect(this.oauth.authHeader(this.method, this.url, this.params)).to.equal('Basic Y2xpZW50LWlkOmNsaWVudC1zZWNyZXQ=');
        });
      });
      describe('#addAuthParams', function() {
        it('returns the given object', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.equal(this.params);
        });
        return it('adds the client id', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.deep.equal({
            client_id: 'client-id',
            client_secret: 'client-secret',
            answer: 42,
            other: 43
          });
        });
      });
      return buildSecretTransitionTests();
    });
    describe('with an app key and authorization code', function() {
      beforeEach(function() {
        return this.oauth = new Dropbox.Util.Oauth({
          key: 'client-id',
          oauthCode: 'auth-code'
        });
      });
      describe('#credentials', function() {
        return it('returns the app key and authorization code', function() {
          return expect(this.oauth.credentials()).to.deep.equal({
            key: 'client-id',
            oauthCode: 'auth-code'
          });
        });
      });
      describe('#step', function() {
        return it('returns AUTHORIZED', function() {
          return expect(this.oauth.step()).to.equal(Dropbox.Client.AUTHORIZED);
        });
      });
      describe('#accessTokenParams', function() {
        describe('without a redirect URL', function() {
          return it('matches the spec', function() {
            return expect(this.oauth.accessTokenParams()).to.deep.equal({
              grant_type: 'authorization_code',
              code: 'auth-code'
            });
          });
        });
        return describe('with a redirect URL', function() {
          return it('matches the spec and includes the URL', function() {
            var url;
            url = 'http://redirect.to/here';
            return expect(this.oauth.accessTokenParams(url)).to.deep.equal({
              grant_type: 'authorization_code',
              code: 'auth-code',
              redirect_uri: url
            });
          });
        });
      });
      describe('#authHeader', function() {
        return it('uses HTTP Basic authentication with the client id and no pw', function() {
          return expect(this.oauth.authHeader(this.method, this.url, this.params)).to.equal('Basic Y2xpZW50LWlkOg==');
        });
      });
      describe('#addAuthParams', function() {
        it('returns the given object', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.equal(this.params);
        });
        return it('adds the client id', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.deep.equal({
            client_id: 'client-id',
            answer: 42,
            other: 43
          });
        });
      });
      return buildSecretlessTransitionTests();
    });
    describe('with an app key + secret and authorization code', function() {
      beforeEach(function() {
        return this.oauth = new Dropbox.Util.Oauth({
          key: 'client-id',
          secret: 'client-secret',
          oauthCode: 'auth-code'
        });
      });
      describe('#credentials', function() {
        return it('returns the app key + secret and state param', function() {
          return expect(this.oauth.credentials()).to.deep.equal({
            key: 'client-id',
            secret: 'client-secret',
            oauthCode: 'auth-code'
          });
        });
      });
      describe('#step', function() {
        return it('returns AUTHORIZED', function() {
          return expect(this.oauth.step()).to.equal(Dropbox.Client.AUTHORIZED);
        });
      });
      describe('#accessTokenParams', function() {
        describe('without a redirect URL', function() {
          return it('matches the spec', function() {
            return expect(this.oauth.accessTokenParams()).to.deep.equal({
              grant_type: 'authorization_code',
              code: 'auth-code'
            });
          });
        });
        return describe('with a redirect URL', function() {
          return it('matches the spec and includes the URL', function() {
            var url;
            url = 'http://redirect.to/here';
            return expect(this.oauth.accessTokenParams(url)).to.deep.equal({
              grant_type: 'authorization_code',
              code: 'auth-code',
              redirect_uri: url
            });
          });
        });
      });
      describe('#authHeader', function() {
        return it('uses HTTP Basic authentication with the id as the username', function() {
          return expect(this.oauth.authHeader(this.method, this.url, this.params)).to.equal('Basic Y2xpZW50LWlkOmNsaWVudC1zZWNyZXQ=');
        });
      });
      describe('#addAuthParams', function() {
        beforeEach(function() {});
        it('returns the given object', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.equal(this.params);
        });
        return it('adds the client id', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.deep.equal({
            client_id: 'client-id',
            client_secret: 'client-secret',
            answer: 42,
            other: 43
          });
        });
      });
      return buildSecretTransitionTests();
    });
    describe('with an app key and Bearer token', function() {
      beforeEach(function() {
        return this.oauth = new Dropbox.Util.Oauth({
          key: 'client-id',
          token: 'access-token'
        });
      });
      describe('#credentials', function() {
        return it('returns the app key and access token', function() {
          return expect(this.oauth.credentials()).to.deep.equal({
            key: 'client-id',
            token: 'access-token'
          });
        });
      });
      describe('#step', function() {
        return it('returns DONE', function() {
          return expect(this.oauth.step()).to.equal(Dropbox.Client.DONE);
        });
      });
      describe('#authHeader', function() {
        return it('uses HTTP Bearer auth', function() {
          return expect(this.oauth.authHeader(this.method, this.url, this.params)).to.equal('Bearer access-token');
        });
      });
      describe('#addAuthParams', function() {
        it('returns the given object', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.equal(this.params);
        });
        return it('adds the access token', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.deep.equal({
            access_token: 'access-token',
            answer: 42,
            other: 43
          });
        });
      });
      return buildSecretlessTransitionTests();
    });
    describe('with an app key + secret and Bearer token', function() {
      beforeEach(function() {
        return this.oauth = new Dropbox.Util.Oauth({
          key: 'client-id',
          secret: 'client-secret',
          token: 'access-token'
        });
      });
      describe('#credentials', function() {
        return it('returns the app key + secret and access token', function() {
          return expect(this.oauth.credentials()).to.deep.equal({
            key: 'client-id',
            secret: 'client-secret',
            token: 'access-token'
          });
        });
      });
      describe('#step', function() {
        return it('returns DONE', function() {
          return expect(this.oauth.step()).to.equal(Dropbox.Client.DONE);
        });
      });
      describe('#authHeader', function() {
        return it('uses HTTP Bearer auth', function() {
          return expect(this.oauth.authHeader(this.method, this.url, this.params)).to.equal('Bearer access-token');
        });
      });
      describe('#addAuthParams', function() {
        it('returns the given object', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.equal(this.params);
        });
        return it('adds the access token', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.deep.equal({
            access_token: 'access-token',
            answer: 42,
            other: 43
          });
        });
      });
      return buildSecretTransitionTests();
    });
    describe('with a Bearer token', function() {
      beforeEach(function() {
        return this.oauth = new Dropbox.Util.Oauth({
          token: 'access-token'
        });
      });
      describe('#credentials', function() {
        return it('returns the access token', function() {
          return expect(this.oauth.credentials()).to.deep.equal({
            token: 'access-token'
          });
        });
      });
      describe('#step', function() {
        return it('returns DONE', function() {
          return expect(this.oauth.step()).to.equal(Dropbox.Client.DONE);
        });
      });
      describe('#authHeader', function() {
        return it('uses HTTP Bearer auth', function() {
          return expect(this.oauth.authHeader(this.method, this.url, this.params)).to.equal('Bearer access-token');
        });
      });
      describe('#addAuthParams', function() {
        it('returns the given object', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.equal(this.params);
        });
        return it('adds the access token', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.deep.equal({
            access_token: 'access-token',
            answer: 42,
            other: 43
          });
        });
      });
      return buildKeylessTransitionTests();
    });
    describe('with an app key and MAC token', function() {
      beforeEach(function() {
        this.oauth = new Dropbox.Util.Oauth({
          key: 'client-id',
          token: 'access-token',
          tokenKey: 'token-key',
          tokenKid: 'token-kid'
        });
        this.stub = sinon.stub(Dropbox.Util.Oauth, 'timestamp');
        return this.stub.returns(this.timestamp);
      });
      afterEach(function() {
        return this.stub.restore();
      });
      describe('#credentials', function() {
        return it('returns the app key and access token', function() {
          return expect(this.oauth.credentials()).to.deep.equal({
            key: 'client-id',
            token: 'access-token',
            tokenKey: 'token-key',
            tokenKid: 'token-kid'
          });
        });
      });
      describe('#step', function() {
        return it('returns DONE', function() {
          return expect(this.oauth.step()).to.equal(Dropbox.Client.DONE);
        });
      });
      describe('#authHeader', function() {
        return it('uses HTTP MAC auth', function() {
          return expect(this.oauth.authHeader(this.method, this.url, this.params)).to.equal('MAC kid=token-kid ts=1370129543574 access_token=access-token ' + 'mac=tlkfjonwKYiWU0Yf5EYwyDQfpJs=');
        });
      });
      describe('#addAuthParams', function() {
        it('returns the given object', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.equal(this.params);
        });
        return it('adds the access token and signature', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.deep.equal({
            access_token: 'access-token',
            kid: 'token-kid',
            mac: 'tlkfjonwKYiWU0Yf5EYwyDQfpJs=',
            ts: 1370129543574,
            answer: 42,
            other: 43
          });
        });
      });
      return buildSecretlessTransitionTests();
    });
    describe('with an app key + secret and MAC token', function() {
      beforeEach(function() {
        this.oauth = new Dropbox.Util.Oauth({
          key: 'client-id',
          secret: 'client-secret',
          token: 'access-token',
          tokenKey: 'token-key',
          tokenKid: 'token-kid'
        });
        this.stub = sinon.stub(Dropbox.Util.Oauth, 'timestamp');
        return this.stub.returns(this.timestamp);
      });
      afterEach(function() {
        return this.stub.restore();
      });
      describe('#credentials', function() {
        return it('returns the app key + secret and access token', function() {
          return expect(this.oauth.credentials()).to.deep.equal({
            key: 'client-id',
            secret: 'client-secret',
            token: 'access-token',
            tokenKey: 'token-key',
            tokenKid: 'token-kid'
          });
        });
      });
      describe('#step', function() {
        return it('returns DONE', function() {
          return expect(this.oauth.step()).to.equal(Dropbox.Client.DONE);
        });
      });
      describe('#authHeader', function() {
        return it('uses HTTP MAC auth', function() {
          return expect(this.oauth.authHeader(this.method, this.url, this.params)).to.equal('MAC kid=token-kid ts=1370129543574 access_token=access-token ' + 'mac=tlkfjonwKYiWU0Yf5EYwyDQfpJs=');
        });
      });
      describe('#addAuthParams', function() {
        it('returns the given object', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.equal(this.params);
        });
        return it('adds the access token and signature', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.deep.equal({
            access_token: 'access-token',
            kid: 'token-kid',
            mac: 'tlkfjonwKYiWU0Yf5EYwyDQfpJs=',
            ts: 1370129543574,
            answer: 42,
            other: 43
          });
        });
      });
      return buildSecretTransitionTests();
    });
    describe('with a MAC token', function() {
      beforeEach(function() {
        this.oauth = new Dropbox.Util.Oauth({
          token: 'access-token',
          tokenKey: 'token-key',
          tokenKid: 'token-kid'
        });
        this.stub = sinon.stub(Dropbox.Util.Oauth, 'timestamp');
        return this.stub.returns(this.timestamp);
      });
      afterEach(function() {
        return this.stub.restore();
      });
      describe('#credentials', function() {
        return it('returns the app key and access token', function() {
          return expect(this.oauth.credentials()).to.deep.equal({
            token: 'access-token',
            tokenKey: 'token-key',
            tokenKid: 'token-kid'
          });
        });
      });
      describe('#step', function() {
        return it('returns DONE', function() {
          return expect(this.oauth.step()).to.equal(Dropbox.Client.DONE);
        });
      });
      describe('#authHeader', function() {
        return it('uses HTTP MAC auth', function() {
          return expect(this.oauth.authHeader(this.method, this.url, this.params)).to.equal('MAC kid=token-kid ts=1370129543574 access_token=access-token ' + 'mac=tlkfjonwKYiWU0Yf5EYwyDQfpJs=');
        });
      });
      describe('#addAuthParams', function() {
        it('returns the given object', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.equal(this.params);
        });
        return it('adds the access token and signature', function() {
          return expect(this.oauth.addAuthParams(this.method, this.url, this.params)).to.deep.equal({
            access_token: 'access-token',
            kid: 'token-kid',
            mac: 'tlkfjonwKYiWU0Yf5EYwyDQfpJs=',
            ts: 1370129543574,
            answer: 42,
            other: 43
          });
        });
      });
      return buildKeylessTransitionTests();
    });
    describe('#queryParamsFromUrl', function() {
      it('extracts simple query params', function() {
        var url;
        url = 'http://localhost:8911/oauth_redirect?param1=value1&param2=value2';
        return expect(Dropbox.Util.Oauth.queryParamsFromUrl(url)).to.deep.equal({
          param1: 'value1',
          param2: 'value2'
        });
      });
      it('extracts simple fragment params', function() {
        var url;
        url = 'http://localhost:8911/oauth_redirect#param1=value1&param2=value2';
        return expect(Dropbox.Util.Oauth.queryParamsFromUrl(url)).to.deep.equal({
          param1: 'value1',
          param2: 'value2'
        });
      });
      it('extracts simple fragment query params', function() {
        var url;
        url = 'http://localhost:8911/oauth_redirect#?param1=value1&param2=value2';
        return expect(Dropbox.Util.Oauth.queryParamsFromUrl(url)).to.deep.equal({
          param1: 'value1',
          param2: 'value2'
        });
      });
      it('extracts simple query and fragment params', function() {
        var url;
        url = 'http://localhost:8911/oauth_redirect?param1=value1#param2=value2';
        return expect(Dropbox.Util.Oauth.queryParamsFromUrl(url)).to.deep.equal({
          param1: 'value1',
          param2: 'value2'
        });
      });
      it('extracts percent-encoded query params', function() {
        var url;
        url = 'http://localhost:8911/oauth_redirect?p%20=v%20';
        return expect(Dropbox.Util.Oauth.queryParamsFromUrl(url)).to.deep.equal({
          'p ': 'v '
        });
      });
      it('extracts query and fragment params with /-prefixed query', function() {
        var url;
        url = 'http://localhost:8911/oauth_redirect?/param1=value1#param2=value2';
        return expect(Dropbox.Util.Oauth.queryParamsFromUrl(url)).to.deep.equal({
          param1: 'value1',
          param2: 'value2'
        });
      });
      it('extracts query and fragment params with /-prefixed fragment', function() {
        var url;
        url = 'http://localhost:8911/oauth_redirect?param1=value1#/param2=value2';
        return expect(Dropbox.Util.Oauth.queryParamsFromUrl(url)).to.deep.equal({
          param1: 'value1',
          param2: 'value2'
        });
      });
      return it('extracts /-prefixed fragment query param', function() {
        var url;
        url = 'http://localhost:8911/oauth_redirect#?/param1=value1';
        return expect(Dropbox.Util.Oauth.queryParamsFromUrl(url)).to.deep.equal({
          param1: 'value1'
        });
      });
    });
    describe('.timestamp', function() {
      it('returns a number', function() {
        return expect(Dropbox.Util.Oauth.timestamp()).to.be.a('number');
      });
      return it('returns non-decreasing values', function() {
        var i, j, results, ts;
        ts = (function() {
          var j, results;
          results = [];
          for (i = j = 0; j <= 100; i = ++j) {
            results.push(Dropbox.Util.Oauth.timestamp());
          }
          return results;
        })();
        results = [];
        for (i = j = 1; j <= 100; i = ++j) {
          results.push(expect(ts[i - i]).to.be.lte(ts[i]));
        }
        return results;
      });
    });
    return describe('.randomAuthStateParam', function() {
      it('returns a short string', function() {
        expect(Dropbox.Util.Oauth.randomAuthStateParam()).to.be.a('string');
        return expect(Dropbox.Util.Oauth.randomAuthStateParam().length).to.be.below(64);
      });
      return it('returns different values', function() {
        var i, j, results, values;
        values = (function() {
          var j, results;
          results = [];
          for (i = j = 0; j <= 100; i = ++j) {
            results.push(Dropbox.Util.Oauth.randomAuthStateParam());
          }
          return results;
        })();
        values.sort();
        results = [];
        for (i = j = 1; j <= 100; i = ++j) {
          results.push(expect(values[i - 1]).not.to.equal(values[i]));
        }
        return results;
      });
    });
  });

}).call(this);
