// Generated by CoffeeScript 1.9.1
(function() {
  describe('Dropbox.Client', function() {
    beforeEach(function() {
      return this.client = new Dropbox.Client({
        key: 'mock00key',
        token: 'mock00token',
        uid: 3141592,
        server: 'https://api$.no-calls-in-fasttests.com'
      });
    });
    describe('with custom API server URLs', function() {
      return it('computes the other URLs correctly', function() {
        var client;
        client = new Dropbox.Client({
          key: 'mock00key',
          server: 'https://api$.sandbox.dropbox-proxy.com'
        });
        expect(client._serverRoot).to.equal('https://api$.sandbox.dropbox-proxy.com');
        expect(client._apiServer).to.match(/^https:\/\/api\d*\.sandbox\.dropbox-proxy\.com$/);
        expect(client._authServer).to.equal('https://www.sandbox.dropbox-proxy.com');
        expect(client._fileServer).to.equal('https://api-content.sandbox.dropbox-proxy.com');
        expect(client._notifyServer).to.equal('https://api-notify.sandbox.dropbox-proxy.com');
        return expect(client._downloadServer).to.equal('https://dl.dropboxusercontent.com');
      });
    });
    describe('#_normalizePath', function() {
      it("doesn't touch relative paths", function() {
        return expect(this.client._normalizePath('aa/b/cc/dd')).to.equal('aa/b/cc/dd');
      });
      it('removes the leading / from absolute paths', function() {
        return expect(this.client._normalizePath('/aaa/b/cc/dd')).to.equal('aaa/b/cc/dd');
      });
      return it('removes multiple leading /s from absolute paths', function() {
        return expect(this.client._normalizePath('///aa/b/ccc/dd')).to.equal('aa/b/ccc/dd');
      });
    });
    describe('#_urlEncodePath', function() {
      it('encodes each segment separately', function() {
        return expect(this.client._urlEncodePath('a b+c/d?e"f/g&h')).to.equal("a%20b%2Bc/d%3Fe%22f/g%26h");
      });
      return it('normalizes paths', function() {
        return expect(this.client._urlEncodePath('///a b+c/g&h')).to.equal("a%20b%2Bc/g%26h");
      });
    });
    describe('#dropboxUid', function() {
      return it('matches the uid in the credentials', function() {
        return expect(this.client.dropboxUid()).to.equal(3141592);
      });
    });
    describe('#reset', function() {
      beforeEach(function() {
        this.authSteps = [];
        this.client.onAuthStepChange.addListener((function(_this) {
          return function(client) {
            return _this.authSteps.push(client.authStep);
          };
        })(this));
        return this.client.reset();
      });
      it('gets the client into the RESET state', function() {
        return expect(this.client.authStep).to.equal(Dropbox.Client.RESET);
      });
      it('removes token and uid information', function() {
        var credentials;
        credentials = this.client.credentials();
        expect(credentials).not.to.have.property('token');
        return expect(credentials).not.to.have.property('uid');
      });
      it('triggers onAuthStepChange', function() {
        return expect(this.authSteps).to.deep.equal([Dropbox.Client.RESET]);
      });
      return it('does not trigger onAuthStep if already reset', function() {
        this.authSteps.length = 0;
        this.client.reset();
        return expect(this.authSteps).to.deep.equal([]);
      });
    });
    describe('#credentials', function() {
      it('contains all the expected keys when DONE', function() {
        var credentials;
        credentials = this.client.credentials();
        expect(credentials).to.have.property('key');
        expect(credentials).to.have.property('token');
        return expect(credentials).to.have.property('uid');
      });
      it('contains all the expected keys when RESET', function() {
        var credentials;
        this.client.reset();
        credentials = this.client.credentials();
        return expect(credentials).to.have.property('key');
      });
      describe('for a client with raw keys', function() {
        beforeEach(function() {
          return this.client.setCredentials({
            key: 'dpf43f3p2l4k3l03',
            secret: 'kd94hf93k423kf44',
            token: 'user-token',
            uid: '1234567'
          });
        });
        it('contains all the expected keys when DONE', function() {
          var credentials;
          credentials = this.client.credentials();
          expect(credentials).to.have.property('key');
          expect(credentials).to.have.property('secret');
          expect(credentials).to.have.property('token');
          return expect(credentials).to.have.property('uid');
        });
        return it('contains all the expected keys when RESET', function() {
          var credentials;
          this.client.reset();
          credentials = this.client.credentials();
          expect(credentials).to.have.property('key');
          return expect(credentials).to.have.property('secret');
        });
      });
      return describe('for a client with custom servers', function() {
        beforeEach(function() {
          return this.client = new Dropbox.Client({
            key: 'mock00key',
            server: 'https://api$.sandbox.dropbox-proxy.com',
            downloadServer: 'https://dlserver.sandbox.dropbox-proxy.com'
          });
        });
        return it('contains the custom servers', function() {
          var credentials;
          credentials = this.client.credentials();
          expect(credentials).to.have.property('server');
          expect(credentials.server).to.equal('https://api$.sandbox.dropbox-proxy.com');
          expect(credentials).to.have.property('downloadServer');
          return expect(credentials.downloadServer).to.equal('https://dlserver.sandbox.dropbox-proxy.com');
        });
      });
    });
    describe('#setCredentials', function() {
      it('gets the client into the RESET state', function() {
        var credentials;
        this.client.setCredentials({
          key: 'app-key',
          secret: 'app-secret'
        });
        expect(this.client.authStep).to.equal(Dropbox.Client.RESET);
        credentials = this.client.credentials();
        expect(credentials.key).to.equal('app-key');
        return expect(credentials.secret).to.equal('app-secret');
      });
      it('gets the client into the DONE state', function() {
        var credentials;
        this.client.setCredentials({
          key: 'app-key',
          secret: 'app-secret',
          token: 'user-token',
          uid: '3141592'
        });
        expect(this.client.authStep).to.equal(Dropbox.Client.DONE);
        credentials = this.client.credentials();
        expect(credentials.key).to.equal('app-key');
        expect(credentials.secret).to.equal('app-secret');
        expect(credentials.token).to.equal('user-token');
        return expect(credentials.uid).to.equal('3141592');
      });
      beforeEach(function() {
        this.authSteps = [];
        return this.client.onAuthStepChange.addListener((function(_this) {
          return function(client) {
            return _this.authSteps.push(client.authStep);
          };
        })(this));
      });
      it('triggers onAuthStepChange when switching from DONE to RESET', function() {
        this.client.setCredentials({
          key: 'app-key',
          secret: 'app-secret'
        });
        return expect(this.authSteps).to.deep.equal([Dropbox.Client.RESET]);
      });
      return it('does not trigger onAuthStepChange when not switching', function() {
        this.client.setCredentials({
          key: 'app-key',
          secret: 'app-secret'
        });
        this.authSteps.length = 0;
        this.client.setCredentials({
          key: 'app-key',
          secret: 'app-secret'
        });
        return expect(this.authSteps).to.deep.equal([]);
      });
    });
    describe('#authenticate', function() {
      describe('without an OAuth driver', function() {
        beforeEach(function() {
          this.stubbed = Dropbox.AuthDriver.autoConfigure;
          this.stubDriver = {
            authType: function() {
              return 'token';
            },
            url: function() {
              return 'http://stub.url/';
            }
          };
          return Dropbox.AuthDriver.autoConfigure = (function(_this) {
            return function(client) {
              return client.authDriver(_this.stubDriver);
            };
          })(this);
        });
        afterEach(function() {
          return Dropbox.AuthDriver.autoConfigure = this.stubbed;
        });
        it('calls autoConfigure when no OAuth driver is supplied', function(done) {
          this.client.reset();
          this.client.authDriver(null);
          this.stubDriver.doAuthorize = (function(_this) {
            return function(authUrl, stateParam, client) {
              expect(client).to.equal(_this.client);
              return done();
            };
          })(this);
          return this.client.authenticate(null);
        });
        it('raises an exception when AuthDriver.autoConfigure fails in RESET', function() {
          this.client.reset();
          expect(this.client.authStep).to.equal(Dropbox.Client.RESET);
          this.client.authDriver(null);
          this.stubDriver = null;
          return expect((function(_this) {
            return function() {
              return _this.client.authenticate(null);
            };
          })(this)).to["throw"](Error, /auto-configuration failed/i);
        });
        return it('raises an exception when autoConfigure fails in AUTHORIZED', function() {
          this.client.setCredentials({
            key: 'app-key',
            secret: 'app-secret',
            oauthCode: 'auth-code'
          });
          expect(this.client.authStep).to.equal(Dropbox.Client.AUTHORIZED);
          this.client.authDriver(null);
          this.stubDriver = null;
          return expect((function(_this) {
            return function() {
              return _this.client.authenticate(null);
            };
          })(this)).to["throw"](Error, /auto-configuration failed/i);
        });
      });
      it('completes without an OAuth driver if already in DONE', function(done) {
        this.client.authDriver(null);
        return this.client.authenticate((function(_this) {
          return function(error, client) {
            expect(error).to.equal(null);
            expect(client).to.equal(_this.client);
            return done();
          };
        })(this));
      });
      it('complains if called when the client is in ERROR', function() {
        this.client.authDriver({
          doAuthorize: function() {
            return assert(false, 'The OAuth driver should not be invoked');
          }
        });
        this.client.authStep = Dropbox.Client.ERROR;
        return expect((function(_this) {
          return function() {
            return _this.client.authenticate(null);
          };
        })(this)).to["throw"](Error, /error.*reset/i);
      });
      return describe('with interactive: false', function() {
        beforeEach(function() {
          this.driver = {
            doAuthorize: function() {
              return assert(false, 'The OAuth driver should not be invoked');
            },
            url: function() {
              return 'https://localhost:8912/oauth_redirect';
            }
          };
          return this.client.authDriver(this.driver);
        });
        it('stops at RESET with interactive: false', function(done) {
          this.client.reset();
          return this.client.authenticate({
            interactive: false
          }, function(error, client) {
            expect(error).to.equal(null);
            expect(client.authStep).to.equal(Dropbox.Client.RESET);
            return done();
          });
        });
        it('stops at PARAM_SET with interactive: false', function(done) {
          this.client.reset();
          this.client._oauth.setAuthStateParam('state_should_not_be_used');
          this.client.authStep = this.client._oauth.step();
          expect(this.client.authStep).to.equal(Dropbox.Client.PARAM_SET);
          return this.client.authenticate({
            interactive: false
          }, function(error, client) {
            expect(error).to.equal(null);
            expect(client.authStep).to.equal(Dropbox.Client.PARAM_SET);
            return done();
          });
        });
        it('proceeds from PARAM_LOADED with interactive: false', function(done) {
          var credentials;
          this.client.reset();
          credentials = this.client.credentials();
          credentials.oauthStateParam = 'state_should_not_be_used';
          this.client.setCredentials(credentials);
          expect(this.client.authStep).to.equal(Dropbox.Client.PARAM_LOADED);
          return this.client.authenticate({
            interactive: false
          }, function(error, client) {
            expect(error).to.equal(null);
            expect(client.authStep).to.equal(Dropbox.Client.PARAM_SET);
            return done();
          });
        });
        return it('calls resumeAuthorize from PARAM_LOADED when defined', function(done) {
          var credentials;
          this.driver.resumeAuthorize = function(stateParam, client, callback) {
            expect(stateParam).to.equal('state_should_not_be_used');
            expect(client.authStep).to.equal(Dropbox.Client.PARAM_LOADED);
            return done();
          };
          this.client.reset();
          credentials = this.client.credentials();
          credentials.oauthStateParam = 'state_should_not_be_used';
          this.client.setCredentials(credentials);
          expect(this.client.authStep).to.equal(Dropbox.Client.PARAM_LOADED);
          return this.client.authenticate(function(error, client) {
            expect('callback_should_not_be_called').to.equal(false);
            return done();
          });
        });
      });
    });
    describe('#signOut', function() {
      describe('without a token', function() {
        beforeEach(function() {
          return this.client.reset();
        });
        return it('throws an exception', function() {
          return expect((function(_this) {
            return function() {
              return _this.client.signOut();
            };
          })(this)).to["throw"](Error, /client.*user.*token/i);
        });
      });
      return describe('with mustInvalidate', function() {
        beforeEach(function() {
          this.client.reset();
          this.client.setCredentials({
            token: 'fake-token'
          });
          this.onAuthStepChangeCalled = [];
          this.client.authDriver({
            onAuthStepChange: (function(_this) {
              return function(client, callback) {
                _this.onAuthStepChangeCalled.push(client.authStep);
                return callback();
              };
            })(this)
          });
          this.xhrErrorMock = {
            status: 0
          };
          return this.client._dispatchXhr = (function(_this) {
            return function(xhr, callback) {
              return callback(new Dropbox.ApiError(_this.xhrErrorMock, 'POST', 'url'));
            };
          })(this);
        });
        describe('unset', function() {
          return it('ignores API server errors', function(done) {
            return this.client.signOff((function(_this) {
              return function(error) {
                expect(error).to.equal(null);
                expect(_this.onAuthStepChangeCalled).to.deep.equal([Dropbox.Client.SIGNED_OUT]);
                expect(_this.client.isAuthenticated()).to.equal(false);
                return done();
              };
            })(this));
          });
        });
        return describe('set to true', function() {
          it('aborts on API server errors', function(done) {
            return this.client.signOut({
              mustInvalidate: true
            }, (function(_this) {
              return function(error) {
                expect(error).to.be.instanceOf(Dropbox.ApiError);
                expect(error.status).to.equal(0);
                expect(_this.onAuthStepChangeCalled.length).to.equal(0);
                expect(_this.client.isAuthenticated()).to.equal(true);
                return done();
              };
            })(this));
          });
          return it('succeeds if the API server says the token is invalid', function(done) {
            this.xhrErrorMock.status = Dropbox.ApiError.INVALID_TOKEN;
            return this.client.signOff({
              mustInvalidate: true
            }, (function(_this) {
              return function(error) {
                expect(error).to.equal(null);
                expect(_this.onAuthStepChangeCalled).to.deep.equal([Dropbox.Client.SIGNED_OUT]);
                expect(_this.client.isAuthenticated()).to.equal(false);
                return done();
              };
            })(this));
          });
        });
      });
    });
    describe('#constructor', function() {
      it('works with an access token and no API key', function() {
        var client;
        client = new Dropbox.Client({
          token: '123'
        });
        return expect(client.authStep).to.equal(Dropbox.Client.DONE);
      });
      it('works with an API key', function() {
        var client;
        client = new Dropbox.Client({
          key: 'key'
        });
        return expect(client.authStep).to.equal(Dropbox.Client.RESET);
      });
      return it('throws an exception if initialized without an API key or token', function() {
        return expect(function() {
          return new Dropbox.Client({});
        }).to["throw"](Error, /no api key/i);
      });
    });
    return describe('#_chooseApiServer', function() {
      describe('with only one API server', function() {
        beforeEach(function() {
          return this.client = new Dropbox.Client({
            key: 'mock00key',
            server: 'https://api$.dropbox.com',
            maxApiServer: 0
          });
        });
        return it('always returns that API server', function() {
          var i, j, results;
          results = [];
          for (i = j = 1; j <= 10; i = ++j) {
            results.push(expect(this.client._chooseApiServer()).to.equal('https://api.dropbox.com'));
          }
          return results;
        });
      });
      return describe('with 10 API servers', function() {
        beforeEach(function() {
          this.client = new Dropbox.Client({
            key: 'mock00key',
            server: 'https://api$.dropbox.com',
            maxApiServer: 10
          });
          return this.stub = sinon.stub(Math, 'random');
        });
        afterEach(function() {
          return this.stub.restore();
        });
        it('can return the un-numbered server', function() {
          this.stub.returns(0.001);
          return expect(this.client._chooseApiServer()).to.equal('https://api.dropbox.com');
        });
        return it('can return the 10th numbered server', function() {
          this.stub.returns(0.999);
          return expect(this.client._chooseApiServer()).to.equal('https://api10.dropbox.com');
        });
      });
    });
  });

}).call(this);
