// Generated by CoffeeScript 1.9.1
(function() {
  describe('Dropbox.Http.AppInfo', function() {
    return describe('.parse', function() {
      describe('on a datastores app', function() {
        beforeEach(function() {
          var appInfo;
          appInfo = {
            "name": "Datastores sample app",
            "icons": {
              "64x64": "https://photos-1.dropbox.com/pi/64x64/OkMXX6d3pl00VrcKu6p-hfjS5wvz9I1j4Nn2sZDFsVs/0/1376456400/7482db5/"
            },
            "permissions": {
              "datastores": true
            }
          };
          return this.appInfo = Dropbox.Http.AppInfo.parse(appInfo, 'qre1rsgf4iszxcu');
        });
        it('parses name correctly', function() {
          expect(this.appInfo).to.have.property('name');
          return expect(this.appInfo.name).to.equal('Datastores sample app');
        });
        it('parses canUseDatastores correctly', function() {
          expect(this.appInfo).to.have.property('canUseDatastores');
          return expect(this.appInfo.canUseDatastores).to.equal(true);
        });
        it('parses canUseFiles correctly', function() {
          expect(this.appInfo).to.have.property('canUseFiles');
          return expect(this.appInfo.canUseFiles).to.equal(false);
        });
        it('parses canUseFullDropbox correctly', function() {
          expect(this.appInfo).to.have.property('canUseFullDropbox');
          return expect(this.appInfo.canUseFullDropbox).to.equal(false);
        });
        it('parses hasAppFolder correctly', function() {
          expect(this.appInfo).to.have.property('hasAppFolder');
          return expect(this.appInfo.hasAppFolder).to.equal(false);
        });
        return describe('#icon', function() {
          it('returns the small icon correctly', function() {
            return expect(this.appInfo.icon(Dropbox.Http.AppInfo.ICON_SMALL)).to.equal('https://photos-1.dropbox.com/pi/64x64/OkMXX6d3pl00VrcKu6p-hfjS5wvz9I1j4Nn2sZDFsVs/0/1376456400/7482db5/');
          });
          it('returns the lack of a large icon correctly', function() {
            return expect(this.appInfo.icon(Dropbox.Http.AppInfo.ICON_LARGE)).to.equal(null);
          });
          return it('interprets height correctly', function() {
            expect(this.appInfo.icon(Dropbox.Http.AppInfo.ICON_SMALL, Dropbox.Http.AppInfo.ICON_SMALL)).to.equal('https://photos-1.dropbox.com/pi/64x64/OkMXX6d3pl00VrcKu6p-hfjS5wvz9I1j4Nn2sZDFsVs/0/1376456400/7482db5/');
            return expect(this.appInfo.icon(Dropbox.Http.AppInfo.ICON_SMALL, Dropbox.Http.AppInfo.ICON_LARGE)).to.equal(null);
          });
        });
      });
      describe('on an app folder app', function() {
        beforeEach(function() {
          var appInfo;
          appInfo = {
            "name": "Automated Testing Keys",
            "icons": {
              "64x64": "https://photos-1.dropbox.com/pi/64x64/KXc4DqzIbFpIAPel2rvJv1yNSAVRVTjACYKynaM2K_g/0/1376524800/4ead4f2/",
              "256x256": "https://photos-4.dropbox.com/pi/256x256/EphMShFe8Orja4WRPlkUnBZNABs-V2WbhkZZlAnVFe0/0/1376524800/fb0e049/"
            },
            "permissions": {
              "datastores": true,
              "files": "app_folder"
            }
          };
          return this.appInfo = Dropbox.Http.AppInfo.parse(appInfo, 'qre1rsgf4iszxcu');
        });
        it('parses name correctly', function() {
          expect(this.appInfo).to.have.property('name');
          return expect(this.appInfo.name).to.equal('Automated Testing Keys');
        });
        it('parses canUseDatastores correctly', function() {
          expect(this.appInfo).to.have.property('canUseDatastores');
          return expect(this.appInfo.canUseDatastores).to.equal(true);
        });
        it('parses canUseFiles correctly', function() {
          expect(this.appInfo).to.have.property('canUseFiles');
          return expect(this.appInfo.canUseFiles).to.equal(true);
        });
        it('parses canUseFullDropbox correctly', function() {
          expect(this.appInfo).to.have.property('canUseFullDropbox');
          return expect(this.appInfo.canUseFullDropbox).to.equal(false);
        });
        it('parses hasAppFolder correctly', function() {
          expect(this.appInfo).to.have.property('hasAppFolder');
          return expect(this.appInfo.hasAppFolder).to.equal(true);
        });
        return describe('#icon', function() {
          it('returns the small icon correctly', function() {
            return expect(this.appInfo.icon(Dropbox.Http.AppInfo.ICON_SMALL)).to.equal('https://photos-1.dropbox.com/pi/64x64/KXc4DqzIbFpIAPel2rvJv1yNSAVRVTjACYKynaM2K_g/0/1376524800/4ead4f2/');
          });
          return it('returns the large icon correctly', function() {
            return expect(this.appInfo.icon(Dropbox.Http.AppInfo.ICON_LARGE)).to.equal('https://photos-4.dropbox.com/pi/256x256/EphMShFe8Orja4WRPlkUnBZNABs-V2WbhkZZlAnVFe0/0/1376524800/fb0e049/');
          });
        });
      });
      return describe('on a full Dropbox app', function() {
        beforeEach(function() {
          var appInfo;
          appInfo = {
            "name": "Automated Testing Keys (Full Access)",
            "icons": {
              "64x64": "https://photos-1.dropbox.com/pi/64x64/KXc4DqzIbFpIAPel2rvJv1yNSAVRVTjACYKynaM2K_g/0/1376524800/4ead4f2/",
              "256x256": "https://photos-4.dropbox.com/pi/256x256/EphMShFe8Orja4WRPlkUnBZNABs-V2WbhkZZlAnVFe0/0/1376524800/fb0e049/"
            },
            "permissions": {
              "datastores": true,
              "files": "full_dropbox"
            }
          };
          return this.appInfo = Dropbox.Http.AppInfo.parse(appInfo, 'qre1rsgf4iszxcu');
        });
        it('parses name correctly', function() {
          expect(this.appInfo).to.have.property('name');
          return expect(this.appInfo.name).to.equal('Automated Testing Keys (Full Access)');
        });
        it('parses canUseDatastores correctly', function() {
          expect(this.appInfo).to.have.property('canUseDatastores');
          return expect(this.appInfo.canUseDatastores).to.equal(true);
        });
        it('parses canUseFiles correctly', function() {
          expect(this.appInfo).to.have.property('canUseFiles');
          return expect(this.appInfo.canUseFiles).to.equal(true);
        });
        it('parses canUseFullDropbox correctly', function() {
          expect(this.appInfo).to.have.property('canUseFullDropbox');
          return expect(this.appInfo.canUseFullDropbox).to.equal(true);
        });
        return it('parses hasAppFolder correctly', function() {
          expect(this.appInfo).to.have.property('hasAppFolder');
          return expect(this.appInfo.hasAppFolder).to.equal(false);
        });
      });
    });
  });

}).call(this);
