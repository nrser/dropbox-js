// Generated by CoffeeScript 1.9.1
(function() {
  describe('Dropbox.Http.UploadCursor', function() {
    describe('.parse', function() {
      describe('on the API example', function() {
        beforeEach(function() {
          var cursorData;
          cursorData = {
            "upload_id": "v0k84B0AT9fYkfMUp0sBTA",
            "offset": 31337,
            "expires": "Tue, 19 Jul 2011 21:55:38 +0000"
          };
          return this.cursor = Dropbox.Http.UploadCursor.parse(cursorData);
        });
        it('parses tag correctly', function() {
          expect(this.cursor).to.have.property('tag');
          return expect(this.cursor.tag).to.equal('v0k84B0AT9fYkfMUp0sBTA');
        });
        it('parses offset correctly', function() {
          expect(this.cursor).to.have.property('offset');
          return expect(this.cursor.offset).to.equal(31337);
        });
        it('parses expiresAt correctly', function() {
          expect(this.cursor).to.have.property('expiresAt');
          expect(this.cursor.expiresAt).to.be.instanceOf(Date);
          return expect(['Tue, 19 Jul 2011 21:55:38 GMT', 'Tue, 19 Jul 2011 21:55:38 UTC']).to.contain(this.cursor.expiresAt.toUTCString());
        });
        return it('round-trips through json / parse correctly', function() {
          var newCursor;
          newCursor = Dropbox.Http.UploadCursor.parse(this.cursor.json());
          return expect(newCursor).to.deep.equal(this.cursor);
        });
      });
      describe('on a reference string', function() {
        beforeEach(function() {
          var rawRef;
          rawRef = 'v0k84B0AT9fYkfMUp0sBTA';
          return this.cursor = Dropbox.Http.UploadCursor.parse(rawRef);
        });
        it('parses tag correctly', function() {
          expect(this.cursor).to.have.property('tag');
          return expect(this.cursor.tag).to.equal('v0k84B0AT9fYkfMUp0sBTA');
        });
        it('parses offset correctly', function() {
          expect(this.cursor).to.have.property('offset');
          return expect(this.cursor.offset).to.equal(0);
        });
        it('parses expiresAt correctly', function() {
          expect(this.cursor).to.have.property('expiresAt');
          expect(this.cursor.expiresAt).to.be.instanceOf(Date);
          return expect(this.cursor.expiresAt - (new Date())).to.be.below(1000);
        });
        return it('round-trips through json / parse correctly', function() {
          var newCursor;
          newCursor = Dropbox.Http.UploadCursor.parse(this.cursor.json());
          newCursor.json();
          return expect(newCursor).to.deep.equal(this.cursor);
        });
      });
      it('passes null through', function() {
        return expect(Dropbox.Http.UploadCursor.parse(null)).to.equal(null);
      });
      return it('passes undefined through', function() {
        return expect(Dropbox.Http.UploadCursor.parse(void 0)).to.equal(void 0);
      });
    });
    describe('.constructor', function() {
      return describe('with no arguments', function() {
        beforeEach(function() {
          return this.cursor = new Dropbox.Http.UploadCursor;
        });
        it('sets up tag correctly', function() {
          expect(this.cursor).to.have.property('tag');
          return expect(this.cursor.tag).to.equal(null);
        });
        it('parses offset correctly', function() {
          expect(this.cursor).to.have.property('offset');
          return expect(this.cursor.offset).to.equal(0);
        });
        it('parses expiresAt correctly', function() {
          expect(this.cursor).to.have.property('expiresAt');
          return expect(this.cursor.expiresAt - (new Date())).to.be.below(1000);
        });
        return it('round-trips through json / parse correctly', function() {
          var newCursor;
          newCursor = Dropbox.Http.UploadCursor.parse(this.cursor.json());
          newCursor.json();
          return expect(newCursor).to.deep.equal(this.cursor);
        });
      });
    });
    return describe('.replace', function() {
      beforeEach(function() {
        return this.cursor = new Dropbox.Http.UploadCursor;
      });
      return describe('on the API example', function() {
        beforeEach(function() {
          var cursorData;
          cursorData = {
            "upload_id": "v0k84B0AT9fYkfMUp0sBTA",
            "offset": 31337,
            "expires": "Tue, 19 Jul 2011 21:55:38 +0000"
          };
          return this.cursor.replace(cursorData);
        });
        it('parses tag correctly', function() {
          expect(this.cursor).to.have.property('tag');
          return expect(this.cursor.tag).to.equal('v0k84B0AT9fYkfMUp0sBTA');
        });
        it('parses offset correctly', function() {
          expect(this.cursor).to.have.property('offset');
          return expect(this.cursor.offset).to.equal(31337);
        });
        it('parses expiresAt correctly', function() {
          expect(this.cursor).to.have.property('expiresAt');
          expect(this.cursor.expiresAt).to.be.instanceOf(Date);
          return expect(['Tue, 19 Jul 2011 21:55:38 GMT', 'Tue, 19 Jul 2011 21:55:38 UTC']).to.contain(this.cursor.expiresAt.toUTCString());
        });
        return it('round-trips through json / parse correctly', function() {
          var newCursor;
          newCursor = Dropbox.Http.UploadCursor.parse(this.cursor.json());
          return expect(newCursor).to.deep.equal(this.cursor);
        });
      });
    });
  });

}).call(this);
