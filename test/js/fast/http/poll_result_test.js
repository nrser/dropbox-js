// Generated by CoffeeScript 1.9.1
(function() {
  describe('Dropbox.Http.PollResult', function() {
    return describe('.parse', function() {
      describe('on a timeout', function() {
        beforeEach(function() {
          var response;
          response = {
            "changes": false
          };
          return this.result = Dropbox.Http.PollResult.parse(response);
        });
        it('parses hasChanges correctly', function() {
          expect(this.result).to.have.property('hasChanges');
          return expect(this.result.hasChanges).to.equal(false);
        });
        return it('parses retryAfter correctly', function() {
          expect(this.result).to.have.property('retryAfter');
          return expect(this.result.retryAfter).to.equal(0);
        });
      });
      describe('on a timeout with backoff', function() {
        beforeEach(function() {
          var response;
          response = {
            "changes": false,
            "backoff": 5
          };
          return this.result = Dropbox.Http.PollResult.parse(response);
        });
        it('parses hasChanges correctly', function() {
          expect(this.result).to.have.property('hasChanges');
          return expect(this.result.hasChanges).to.equal(false);
        });
        return it('parses retryAfter correctly', function() {
          expect(this.result).to.have.property('retryAfter');
          return expect(this.result.retryAfter).to.equal(5);
        });
      });
      describe('on a change report', function() {
        beforeEach(function() {
          var response;
          response = {
            "changes": true
          };
          return this.result = Dropbox.Http.PollResult.parse(response);
        });
        it('parses hasChanges correctly', function() {
          expect(this.result).to.have.property('hasChanges');
          return expect(this.result.hasChanges).to.equal(true);
        });
        return it('parses retryAfter correctly', function() {
          expect(this.result).to.have.property('retryAfter');
          return expect(this.result.retryAfter).to.equal(0);
        });
      });
      it('passes null through', function() {
        return expect(Dropbox.Http.PollResult.parse(null)).to.equal(null);
      });
      return it('passes undefined through', function() {
        return expect(Dropbox.Http.PollResult.parse(void 0)).to.equal(void 0);
      });
    });
  });

}).call(this);
