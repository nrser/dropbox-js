// Generated by CoffeeScript 1.9.1
(function() {
  describe('Dropbox.Http.RangeInfo', function() {
    return describe('.parse', function() {
      describe('on the first RFC 2616 example', function() {
        beforeEach(function() {
          return this.range = Dropbox.Http.RangeInfo.parse('bytes 0-499/1234');
        });
        return it('parses correctly', function() {
          expect(this.range).to.have.property('start');
          expect(this.range.start).to.equal(0);
          expect(this.range).to.have.property('end');
          expect(this.range.end).to.equal(499);
          expect(this.range).to.have.property('size');
          return expect(this.range.size).to.equal(1234);
        });
      });
      describe('on the third RFC 2616 example', function() {
        beforeEach(function() {
          return this.range = Dropbox.Http.RangeInfo.parse('bytes 500-1233/1234');
        });
        return it('parses correctly', function() {
          expect(this.range).to.have.property('start');
          expect(this.range.start).to.equal(500);
          expect(this.range).to.have.property('end');
          expect(this.range.end).to.equal(1233);
          expect(this.range).to.have.property('size');
          return expect(this.range.size).to.equal(1234);
        });
      });
      describe('on the last RFC 2616 example', function() {
        beforeEach(function() {
          return this.range = Dropbox.Http.RangeInfo.parse('bytes 21010-47021/47022');
        });
        return it('parses correctly', function() {
          expect(this.range).to.have.property('start');
          expect(this.range.start).to.equal(21010);
          expect(this.range).to.have.property('end');
          expect(this.range.end).to.equal(47021);
          expect(this.range).to.have.property('size');
          return expect(this.range.size).to.equal(47022);
        });
      });
      return describe('on an example missing the size', function() {
        beforeEach(function() {
          return this.range = Dropbox.Http.RangeInfo.parse('bytes 0-9/*');
        });
        return it('parses correctly', function() {
          expect(this.range).to.have.property('start');
          expect(this.range.start).to.equal(0);
          expect(this.range).to.have.property('end');
          expect(this.range.end).to.equal(9);
          expect(this.range).to.have.property('size');
          return expect(this.range.size).to.equal(null);
        });
      });
    });
  });

}).call(this);
