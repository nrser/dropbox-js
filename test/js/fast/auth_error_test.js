// Generated by CoffeeScript 1.9.1
(function() {
  describe('Dropbox.AuthError', function() {
    describe('#constructor', function() {
      return it('throws an exception when given a non-error response', function() {
        return expect((function(_this) {
          return function() {
            return new Dropbox.AuthError({
              access_token: 'token',
              token_type: 'Bearer'
            });
          };
        })(this)).to["throw"](Error, /oauth.*error/i);
      });
    });
    describe('with the RFC 6749 4.2.2 example', function() {
      beforeEach(function() {
        return this.error = new Dropbox.AuthError({
          error: 'access_denied',
          state: 'xyz'
        });
      });
      it('parses the error code', function() {
        expect(this.error).to.have.property('code');
        return expect(this.error.code).to.equal(Dropbox.AuthError.ACCESS_DENIED);
      });
      it("doesn't report a description", function() {
        return expect(this.error.description).to.equal(null);
      });
      it("doesn't report an URI", function() {
        return expect(this.error.uri).to.equal(null);
      });
      return describe('#toString', function() {
        it('reports the error code', function() {
          return expect(this.error.toString()).to.match(/access_denied/i);
        });
        return it('says it is related to OAuth', function() {
          return expect(this.error.toString()).to.match(/oauth.*error/i);
        });
      });
    });
    describe('with a synthetic example', function() {
      beforeEach(function() {
        return this.error = new Dropbox.AuthError({
          error: 'invalid_scope',
          error_description: 'The Dropbox API does not use scopes',
          error_uri: 'http://error.uri',
          state: 'xyz'
        });
      });
      it('parses the error code', function() {
        expect(this.error).to.have.property('code');
        return expect(this.error.code).to.equal(Dropbox.AuthError.INVALID_SCOPE);
      });
      it('parses the description', function() {
        return expect(this.error.description).to.equal('The Dropbox API does not use scopes');
      });
      it('parses the URI', function() {
        return expect(this.error.uri).to.equal('http://error.uri');
      });
      return describe('#toString', function() {
        it('reports the error code', function() {
          return expect(this.error.toString()).to.match(/invalid_scope/i);
        });
        it('reports the error description', function() {
          return expect(this.error.toString()).to.match(/not use scopes/i);
        });
        return it('says it is related to OAuth', function() {
          return expect(this.error.toString()).to.match(/oauth.*error/i);
        });
      });
    });
    return describe('with an API server example', function() {
      beforeEach(function() {
        return this.error = new Dropbox.AuthError({
          error: {
            error: 'invalid_grant',
            error_description: 'given "code" is not valid'
          }
        });
      });
      it('parses the error code', function() {
        expect(this.error).to.have.property('code');
        return expect(this.error.code).to.equal(Dropbox.AuthError.INVALID_GRANT);
      });
      return it('parses the description', function() {
        return expect(this.error.description).to.equal('given "code" is not valid');
      });
    });
  });

}).call(this);
