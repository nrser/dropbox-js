// Generated by CoffeeScript 1.9.1
(function() {
  describe('Dropbox.AuthDriver.ChromeBase', function() {
    beforeEach(function() {
      var ref;
      this.chrome = typeof chrome !== "undefined" && chrome !== null ? (ref = chrome.runtime) != null ? ref.id : void 0 : void 0;
      return this.client = new Dropbox.Client(testKeys);
    });
    return describe('#loadCredentials', function() {
      beforeEach(function() {
        if (!this.chrome) {
          return;
        }
        this.client = new Dropbox.Client(testKeys);
        return this.driver = new Dropbox.AuthDriver.ChromeBase({
          scope: 'some_scope'
        });
      });
      it('produces the credentials passed to storeCredentials', function(done) {
        var goldCredentials;
        if (!this.chrome) {
          return done();
        }
        goldCredentials = this.client.credentials();
        return this.driver.storeCredentials(goldCredentials, (function(_this) {
          return function() {
            _this.driver = new Dropbox.AuthDriver.ChromeBase({
              scope: 'some_scope'
            });
            return _this.driver.loadCredentials(function(credentials) {
              expect(credentials).to.deep.equal(goldCredentials);
              return done();
            });
          };
        })(this));
      });
      it('produces null after forgetCredentials was called', function(done) {
        if (!this.chrome) {
          return done();
        }
        return this.driver.storeCredentials(this.client.credentials(), (function(_this) {
          return function() {
            return _this.driver.forgetCredentials(function() {
              _this.driver = new Dropbox.AuthDriver.ChromeBase({
                scope: 'some_scope'
              });
              return _this.driver.loadCredentials(function(credentials) {
                expect(credentials).to.equal(null);
                return done();
              });
            });
          };
        })(this));
      });
      return it('produces null if a different scope is provided', function(done) {
        if (!this.chrome) {
          return done();
        }
        return this.driver.storeCredentials(this.client.credentials(), (function(_this) {
          return function() {
            _this.driver = new Dropbox.AuthDriver.ChromeBase({
              scope: 'other_scope'
            });
            return _this.driver.loadCredentials(function(credentials) {
              expect(credentials).to.equal(null);
              return done();
            });
          };
        })(this));
      });
    });
  });

  describe('Dropbox.AuthDriver.ChromeApp', function() {
    beforeEach(function() {
      var ref, ref1;
      this.chrome = typeof chrome !== "undefined" && chrome !== null ? (ref = chrome.runtime) != null ? ref.id : void 0 : void 0;
      this.chrome_app = this.chrome && (typeof chrome !== "undefined" && chrome !== null ? (ref1 = chrome.app) != null ? ref1.window : void 0 : void 0);
      return this.client = new Dropbox.Client(testKeys);
    });
    describe('#url', function() {
      beforeEach(function() {
        if (!this.chrome_app) {
          return;
        }
        return this.driver = new Dropbox.AuthDriver.ChromeApp();
      });
      return it('produces a chromiumapp.org url', function() {
        if (!this.chrome_app) {
          return;
        }
        return expect(this.driver.url()).to.match(/https:\/\/[a-z0-9]+\.chromiumapp\.org\/$/);
      });
    });
    return describe('integration', function() {
      it('should work', function(done) {
        var authDriver, client;
        if (!this.chrome_app) {
          return done();
        }
        this.timeout(45 * 1000);
        client = new Dropbox.Client(testKeys);
        client.reset();
        authDriver = new Dropbox.AuthDriver.ChromeApp({
          scope: 'chrome_integration'
        });
        client.authDriver(authDriver);
        return authDriver.forgetCredentials(function() {
          return client.authenticate(function(error, client) {
            expect(error).to.equal(null);
            expect(client.authStep).to.equal(Dropbox.Client.DONE);
            return client.getAccountInfo(function(error, accountInfo) {
              expect(error).to.equal(null);
              expect(accountInfo).to.be.instanceOf(Dropbox.AccountInfo);
              client.reset();
              return client.authenticate({
                interactive: false
              }, function(error, client) {
                expect(error).to.equal(null);
                expect(client.authStep).to.equal(Dropbox.Client.DONE);
                expect(client.isAuthenticated()).to.equal(true);
                return client.getAccountInfo(function(error, accountInfo) {
                  expect(error).to.equal(null);
                  expect(accountInfo).to.be.instanceOf(Dropbox.AccountInfo);
                  return done();
                });
              });
            });
          });
        });
      });
      return it('should be the default driver in Chrome packaged apps', function() {
        var client;
        if (!this.chrome_app) {
          return;
        }
        client = new Dropbox.Client(testKeys);
        Dropbox.AuthDriver.autoConfigure(client);
        return expect(client._driver).to.be.instanceOf(Dropbox.AuthDriver.ChromeApp);
      });
    });
  });

  describe('Dropbox.AuthDriver.ChromeExtension', function() {
    beforeEach(function() {
      var ref;
      this.chrome = typeof chrome !== "undefined" && chrome !== null ? (ref = chrome.runtime) != null ? ref.id : void 0 : void 0;
      this.chrome_ext = this.chrome && (typeof chrome !== "undefined" && chrome !== null ? chrome.tabs : void 0);
      return this.client = new Dropbox.Client(testKeys);
    });
    describe('#url', function() {
      beforeEach(function() {
        if (!this.chrome_ext) {
          return;
        }
        this.path = 'test/html/redirect_driver_test.html';
        return this.driver = new Dropbox.AuthDriver.ChromeExtension({
          receiverPath: this.path
        });
      });
      it('produces a chrome-extension:// url', function() {
        if (!this.chrome_ext) {
          return;
        }
        return expect(this.driver.url('oauth token')).to.match(/^chrome-extension:\/\//);
      });
      return it('produces an URL with the correct suffix', function() {
        var url;
        if (!this.chrome_ext) {
          return;
        }
        url = this.driver.url('oauth token');
        return expect(url.substring(url.length - this.path.length)).to.equal(this.path);
      });
    });
    return describe('integration', function() {
      it('should work', function(done) {
        var authDriver, client;
        if (!this.chrome_ext) {
          return done();
        }
        this.timeout(45 * 1000);
        client = new Dropbox.Client(testKeys);
        client.reset();
        authDriver = new Dropbox.AuthDriver.ChromeExtension({
          receiverPath: 'test/html/chrome_oauth_receiver.html',
          scope: 'chrome_integration'
        });
        client.authDriver(authDriver);
        return authDriver.forgetCredentials(function() {
          return client.authenticate(function(error, client) {
            expect(error).to.equal(null);
            expect(client.authStep).to.equal(Dropbox.Client.DONE);
            return client.getAccountInfo(function(error, accountInfo) {
              expect(error).to.equal(null);
              expect(accountInfo).to.be.instanceOf(Dropbox.AccountInfo);
              client.reset();
              return client.authenticate({
                interactive: false
              }, function(error, client) {
                expect(error).to.equal(null);
                expect(client.authStep).to.equal(Dropbox.Client.DONE);
                expect(client.isAuthenticated()).to.equal(true);
                return client.getAccountInfo(function(error, accountInfo) {
                  expect(error).to.equal(null);
                  expect(accountInfo).to.be.instanceOf(Dropbox.AccountInfo);
                  return done();
                });
              });
            });
          });
        });
      });
      return it('should be the default driver in Chrome extensions', function() {
        var client;
        if (!this.chrome_ext) {
          return;
        }
        client = new Dropbox.Client(testKeys);
        Dropbox.AuthDriver.autoConfigure(client);
        return expect(client._driver).to.be.instanceOf(Dropbox.AuthDriver.ChromeExtension);
      });
    });
  });

}).call(this);
