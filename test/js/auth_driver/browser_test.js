// Generated by CoffeeScript 1.9.1
(function() {
  describe('Dropbox.AuthDriver.BrowserBase', function() {
    beforeEach(function() {
      var ref;
      this.node_js = (typeof module !== "undefined" && module !== null) && ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) && (typeof require !== "undefined" && require !== null);
      this.chrome_app = typeof chrome !== "undefined" && chrome !== null ? (ref = chrome.runtime) != null ? ref.id : void 0 : void 0;
      return this.client = new Dropbox.Client(testKeys);
    });
    describe('with rememberUser: false', function() {
      beforeEach(function(done) {
        if (this.node_js || this.chrome_app) {
          return done();
        }
        this.driver = new Dropbox.AuthDriver.BrowserBase({
          rememberUser: false
        });
        this.driver.setStorageKey(this.client);
        this.scopedDriver = new Dropbox.AuthDriver.BrowserBase({
          rememberUser: false,
          scope: 'other'
        });
        this.scopedDriver.setStorageKey(this.client);
        return this.driver.forgetCredentials((function(_this) {
          return function() {
            return _this.scopedDriver.forgetCredentials(function() {
              return done();
            });
          };
        })(this));
      });
      afterEach(function(done) {
        if (this.node_js || this.chrome_app) {
          return done();
        }
        return this.driver.forgetCredentials((function(_this) {
          return function() {
            return _this.scopedDriver.forgetCredentials(function() {
              return done();
            });
          };
        })(this));
      });
      return describe('#loadCredentials', function() {
        it('produces the credentials passed to storeCredentials', function(done) {
          var goldCredentials;
          if (this.node_js || this.chrome_app) {
            return done();
          }
          goldCredentials = this.client.credentials();
          return this.driver.storeCredentials(goldCredentials, (function(_this) {
            return function() {
              return _this.driver.loadCredentials(function(credentials) {
                expect(credentials).to.deep.equal(goldCredentials);
                return done();
              });
            };
          })(this));
        });
        it('produces null after forgetCredentials was called', function(done) {
          if (this.node_js || this.chrome_app) {
            return done();
          }
          return this.driver.storeCredentials(this.client.credentials(), (function(_this) {
            return function() {
              return _this.driver.forgetCredentials(function() {
                return _this.driver.loadCredentials(function(credentials) {
                  expect(credentials).to.equal(null);
                  return done();
                });
              });
            };
          })(this));
        });
        return it('produces null if a different scope is provided', function(done) {
          var goldCredentials;
          if (this.node_js || this.chrome_app) {
            return done();
          }
          goldCredentials = this.client.credentials();
          return this.driver.storeCredentials(goldCredentials, (function(_this) {
            return function() {
              return _this.scopedDriver.loadCredentials(function(credentials) {
                expect(credentials).to.equal(null);
                return _this.driver.loadCredentials(function(credentials) {
                  expect(credentials).to.deep.equal(goldCredentials);
                  return done();
                });
              });
            };
          })(this));
        });
      });
    });
    return describe('without localStorage support', function() {
      beforeEach(function(done) {
        if (this.node_js || this.chrome_app) {
          return done();
        }
        this.stub = sinon.stub(Dropbox.AuthDriver.BrowserBase, 'localStorage');
        this.stub.returns({});
        if (this.node_js || this.chrome_app) {
          return done();
        }
        this.driver = new Dropbox.AuthDriver.BrowserBase({
          rememberUser: false
        });
        this.driver.setStorageKey(this.client);
        this.scopedDriver = new Dropbox.AuthDriver.BrowserBase({
          rememberUser: false,
          scope: 'other'
        });
        this.scopedDriver.setStorageKey(this.client);
        return this.driver.forgetCredentials((function(_this) {
          return function() {
            return _this.scopedDriver.forgetCredentials(function() {
              return done();
            });
          };
        })(this));
      });
      afterEach(function(done) {
        if (this.node_js || this.chrome_app) {
          return done();
        }
        this.stub.restore();
        return this.driver.forgetCredentials((function(_this) {
          return function() {
            return _this.scopedDriver.forgetCredentials(function() {
              return done();
            });
          };
        })(this));
      });
      describe('#loadCredentials', function() {
        it('produces the credentials passed to storeCredentials', function(done) {
          var goldCredentials;
          if (this.node_js || this.chrome_app) {
            return done();
          }
          goldCredentials = this.client.credentials();
          return this.driver.storeCredentials(goldCredentials, (function(_this) {
            return function() {
              return _this.driver.loadCredentials(function(credentials) {
                expect(credentials).to.deep.equal(goldCredentials);
                return done();
              });
            };
          })(this));
        });
        it('works in the presence of other cookies', function(done) {
          var goldCredentials;
          if (this.node_js || this.chrome_app) {
            return done();
          }
          goldCredentials = this.client.credentials();
          document.cookie = 'answer=42; path=/';
          return this.driver.storeCredentials(goldCredentials, (function(_this) {
            return function() {
              document.cookie = 'zzz_answer=42; path=/';
              return _this.driver.loadCredentials(function(credentials) {
                expect(credentials).to.deep.equal(goldCredentials);
                return done();
              });
            };
          })(this));
        });
        it('produces null after forgetCredentials was called', function(done) {
          if (this.node_js || this.chrome_app) {
            return done();
          }
          return this.driver.storeCredentials(this.client.credentials(), (function(_this) {
            return function() {
              return _this.driver.forgetCredentials(function() {
                return _this.driver.loadCredentials(function(credentials) {
                  expect(credentials).to.equal(null);
                  return done();
                });
              });
            };
          })(this));
        });
        return it('produces null if a different scope is provided', function(done) {
          var goldCredentials;
          if (this.node_js || this.chrome_app) {
            return done();
          }
          goldCredentials = this.client.credentials();
          return this.driver.storeCredentials(goldCredentials, (function(_this) {
            return function() {
              return _this.scopedDriver.loadCredentials(function(credentials) {
                expect(credentials).to.equal(null);
                return _this.driver.loadCredentials(function(credentials) {
                  expect(credentials).to.deep.equal(goldCredentials);
                  return done();
                });
              });
            };
          })(this));
        });
      });
      return describe('#storeCredentials', function() {
        return it('falls back to cookies', function(done) {
          if (this.node_js || this.chrome_app) {
            return done();
          }
          return this.driver.storeCredentials(this.client.credentials(), (function(_this) {
            return function() {
              expect(document.cookie).to.contain('dropbox-auth');
              return done();
            };
          })(this));
        });
      });
    });
  });

  describe('Dropbox.AuthDriver.Redirect', function() {
    describe('#loadCredentials', function() {
      beforeEach(function() {
        var ref;
        this.node_js = (typeof module !== "undefined" && module !== null) && (module.exports != null) && (typeof require !== "undefined" && require !== null);
        this.chrome_app = (typeof chrome !== "undefined" && chrome !== null) && (chrome.extension || ((ref = chrome.app) != null ? ref.runtime : void 0));
        if (this.node_js || this.chrome_app) {
          return;
        }
        this.client = new Dropbox.Client(testKeys);
        this.driver = new Dropbox.AuthDriver.Redirect({
          scope: 'some_scope'
        });
        return this.driver.setStorageKey(this.client);
      });
      it('produces the credentials passed to storeCredentials', function(done) {
        var goldCredentials;
        if (this.node_js || this.chrome_app) {
          return done();
        }
        goldCredentials = this.client.credentials();
        return this.driver.storeCredentials(goldCredentials, (function(_this) {
          return function() {
            _this.driver = new Dropbox.AuthDriver.Redirect({
              scope: 'some_scope'
            });
            _this.driver.setStorageKey(_this.client);
            return _this.driver.loadCredentials(function(credentials) {
              expect(credentials).to.deep.equal(goldCredentials);
              return done();
            });
          };
        })(this));
      });
      it('produces null after forgetCredentials was called', function(done) {
        if (this.node_js || this.chrome_app) {
          return done();
        }
        return this.driver.storeCredentials(this.client.credentials(), (function(_this) {
          return function() {
            return _this.driver.forgetCredentials(function() {
              _this.driver = new Dropbox.AuthDriver.Redirect({
                scope: 'some_scope'
              });
              _this.driver.setStorageKey(_this.client);
              return _this.driver.loadCredentials(function(credentials) {
                expect(credentials).to.equal(null);
                return done();
              });
            });
          };
        })(this));
      });
      return it('produces null if a different scope is provided', function(done) {
        if (this.node_js || this.chrome_app) {
          return done();
        }
        this.driver.setStorageKey(this.client);
        return this.driver.storeCredentials(this.client.credentials(), (function(_this) {
          return function() {
            _this.driver = new Dropbox.AuthDriver.Redirect({
              scope: 'other_scope'
            });
            _this.driver.setStorageKey(_this.client);
            return _this.driver.loadCredentials(function(credentials) {
              expect(credentials).to.equal(null);
              return done();
            });
          };
        })(this));
      });
    });
    return describe('integration', function() {
      beforeEach(function() {
        var ref;
        this.node_js = (typeof module !== "undefined" && module !== null) && (module.exports != null) && (typeof require !== "undefined" && require !== null);
        this.chrome_app = (typeof chrome !== "undefined" && chrome !== null) && (chrome.extension || ((ref = chrome.app) != null ? ref.runtime : void 0));
        return this.cordova = typeof cordova !== "undefined" && cordova !== null;
      });
      it('should work', function(done) {
        var listener, listenerCalled;
        if (this.node_js || this.chrome_app || this.cordova) {
          return done();
        }
        this.timeout(45 * 1000);
        listenerCalled = false;
        listener = function(event) {
          var credentials, data, error, ref;
          window.removeEventListener('message', listener);
          Dropbox.AuthDriver.Popup.onMessage.removeListener(listener);
          if (listenerCalled === true) {
            return;
          }
          listenerCalled = true;
          data = event.data || event;
          expect(data).to.match(/^\[.*\]$/);
          ref = JSON.parse(data), error = ref[0], credentials = ref[1];
          expect(error).to.equal(null);
          expect(credentials).to.have.property('uid');
          expect(credentials.uid).to.be.a('string');
          expect(credentials).to.have.property('token');
          expect(credentials.token).to.be.a('string');
          return done();
        };
        window.addEventListener('message', listener);
        Dropbox.AuthDriver.Popup.onMessage.addListener(listener);
        return (new Dropbox.AuthDriver.Popup()).openWindow('/test/html/redirect_driver_test.html');
      });
      return it('should be the default driver on browsers', function() {
        var client;
        if (this.node_js || this.chrome_app || this.cordova) {
          return;
        }
        client = new Dropbox.Client(testKeys);
        Dropbox.AuthDriver.autoConfigure(client);
        return expect(client._driver).to.be.instanceOf(Dropbox.AuthDriver.Redirect);
      });
    });
  });

  describe('Dropbox.AuthDriver.Popup', function() {
    describe('#loadCredentials', function() {
      beforeEach(function() {
        var ref;
        this.node_js = (typeof module !== "undefined" && module !== null) && (module.exports != null) && (typeof require !== "undefined" && require !== null);
        this.chrome_app = (typeof chrome !== "undefined" && chrome !== null) && (chrome.extension || ((ref = chrome.app) != null ? ref.runtime : void 0));
        if (this.node_js || this.chrome_app) {
          return;
        }
        this.client = new Dropbox.Client(testKeys);
        this.driver = new Dropbox.AuthDriver.Popup({
          scope: 'some_scope'
        });
        return this.driver.setStorageKey(this.client);
      });
      it('produces the credentials passed to storeCredentials', function(done) {
        var goldCredentials;
        if (this.node_js || this.chrome_app) {
          return done();
        }
        goldCredentials = this.client.credentials();
        return this.driver.storeCredentials(goldCredentials, (function(_this) {
          return function() {
            _this.driver = new Dropbox.AuthDriver.Popup({
              scope: 'some_scope'
            });
            _this.driver.setStorageKey(_this.client);
            return _this.driver.loadCredentials(function(credentials) {
              expect(credentials).to.deep.equal(goldCredentials);
              return done();
            });
          };
        })(this));
      });
      it('produces null after forgetCredentials was called', function(done) {
        if (this.node_js || this.chrome_app) {
          return done();
        }
        return this.driver.storeCredentials(this.client.credentials(), (function(_this) {
          return function() {
            return _this.driver.forgetCredentials(function() {
              _this.driver = new Dropbox.AuthDriver.Popup({
                scope: 'some_scope'
              });
              _this.driver.setStorageKey(_this.client);
              return _this.driver.loadCredentials(function(credentials) {
                expect(credentials).to.equal(null);
                return done();
              });
            });
          };
        })(this));
      });
      return it('produces null if a different scope is provided', function(done) {
        if (this.node_js || this.chrome_app) {
          return done();
        }
        this.driver.setStorageKey(this.client);
        return this.driver.storeCredentials(this.client.credentials(), (function(_this) {
          return function() {
            _this.driver = new Dropbox.AuthDriver.Popup({
              scope: 'other_scope'
            });
            _this.driver.setStorageKey(_this.client);
            return _this.driver.loadCredentials(function(credentials) {
              expect(credentials).to.equal(null);
              return done();
            });
          };
        })(this));
      });
    });
    return describe('integration', function() {
      beforeEach(function() {
        var ref;
        this.node_js = (typeof module !== "undefined" && module !== null) && (module.exports != null) && (typeof require !== "undefined" && require !== null);
        this.chrome_app = (typeof chrome !== "undefined" && chrome !== null) && (chrome.extension || ((ref = chrome.app) != null ? ref.runtime : void 0));
        return this.cordova = typeof cordova !== "undefined" && cordova !== null;
      });
      it('should work with rememberUser: false', function(done) {
        var authDriver, client;
        if (this.node_js || this.chrome_app || this.cordova) {
          return done();
        }
        this.timeout(45 * 1000);
        client = new Dropbox.Client(testKeys);
        client.reset();
        authDriver = new Dropbox.AuthDriver.Popup({
          receiverFile: 'oauth_receiver.html',
          scope: 'popup-integration',
          rememberUser: false
        });
        client.authDriver(authDriver);
        return client.authenticate((function(_this) {
          return function(error, client) {
            expect(error).to.equal(null);
            expect(client.authStep).to.equal(Dropbox.Client.DONE);
            return client.getAccountInfo(function(error, accountInfo) {
              expect(error).to.equal(null);
              expect(accountInfo).to.be.instanceOf(Dropbox.AccountInfo);
              client.reset();
              return client.authenticate({
                interactive: false
              }, function(error, client) {
                expect(error).to.equal(null);
                expect(client.authStep).to.equal(Dropbox.Client.RESET);
                expect(client.isAuthenticated()).to.equal(false);
                return done();
              });
            });
          };
        })(this));
      });
      return it('should work with rememberUser: true', function(done) {
        var authDriver, client;
        if (this.node_js || this.chrome_app || this.cordova) {
          return done();
        }
        this.timeout(45 * 1000);
        client = new Dropbox.Client(testKeys);
        client.reset();
        authDriver = new Dropbox.AuthDriver.Popup({
          receiverFile: 'oauth_receiver.html',
          scope: 'popup-integration',
          rememberUser: true
        });
        client.authDriver(authDriver);
        authDriver.setStorageKey(client);
        return authDriver.forgetCredentials(function() {
          return client.authenticate(function(error, client) {
            expect(error).to.equal(null);
            expect(client.authStep).to.equal(Dropbox.Client.DONE);
            return client.getAccountInfo(function(error, accountInfo) {
              expect(error).to.equal(null);
              expect(accountInfo).to.be.instanceOf(Dropbox.AccountInfo);
              client.reset();
              return client.authenticate({
                interactive: false
              }, function(error, client) {
                expect(error).to.equal(null);
                expect(client.authStep).to.equal(Dropbox.Client.DONE);
                expect(client.isAuthenticated()).to.equal(true);
                return client.getAccountInfo(function(error, accountInfo) {
                  expect(error).to.equal(null);
                  expect(accountInfo).to.be.instanceOf(Dropbox.AccountInfo);
                  return done();
                });
              });
            });
          });
        });
      });
    });
  });

}).call(this);
