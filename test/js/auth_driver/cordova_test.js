// Generated by CoffeeScript 1.9.1
(function() {
  describe('Dropbox.AuthDriver.Cordova', function() {
    describe('#url', function() {
      beforeEach(function() {
        this.stub = sinon.stub(Dropbox.AuthDriver.BrowserBase, 'currentLocation');
        return this.stub.returns('http://test:123/a/path/file.htmx');
      });
      afterEach(function() {
        return this.stub.restore();
      });
      return it('uses a dropbox.com redirect URL', function() {
        var driver;
        driver = new Dropbox.AuthDriver.Cordova;
        return expect(driver.url()).to.match(/dropbox\.com/);
      });
    });
    describe('#loadCredentials', function() {
      beforeEach(function() {
        var ref;
        this.node_js = (typeof module !== "undefined" && module !== null) && (module.exports != null) && (typeof require !== "undefined" && require !== null);
        this.chrome_app = (typeof chrome !== "undefined" && chrome !== null) && (chrome.extension || ((ref = chrome.app) != null ? ref.runtime : void 0));
        if (this.node_js || this.chrome_app) {
          return;
        }
        this.client = new Dropbox.Client(testKeys);
        this.driver = new Dropbox.AuthDriver.Cordova({
          scope: 'some_scope'
        });
        return this.driver.setStorageKey(this.client);
      });
      it('produces the credentials passed to storeCredentials', function(done) {
        var goldCredentials;
        if (this.node_js || this.chrome_app) {
          return done();
        }
        goldCredentials = this.client.credentials();
        return this.driver.storeCredentials(goldCredentials, (function(_this) {
          return function() {
            _this.driver = new Dropbox.AuthDriver.Cordova({
              scope: 'some_scope'
            });
            _this.driver.setStorageKey(_this.client);
            return _this.driver.loadCredentials(function(credentials) {
              expect(credentials).to.deep.equal(goldCredentials);
              return done();
            });
          };
        })(this));
      });
      it('produces null after forgetCredentials was called', function(done) {
        if (this.node_js || this.chrome_app) {
          return done();
        }
        return this.driver.storeCredentials(this.client.credentials(), (function(_this) {
          return function() {
            return _this.driver.forgetCredentials(function() {
              _this.driver = new Dropbox.AuthDriver.Cordova({
                scope: 'some_scope'
              });
              _this.driver.setStorageKey(_this.client);
              return _this.driver.loadCredentials(function(credentials) {
                expect(credentials).to.equal(null);
                return done();
              });
            });
          };
        })(this));
      });
      return it('produces null if a different scope is provided', function(done) {
        if (this.node_js || this.chrome_app) {
          return done();
        }
        this.driver.setStorageKey(this.client);
        return this.driver.storeCredentials(this.client.credentials(), (function(_this) {
          return function() {
            _this.driver = new Dropbox.AuthDriver.Cordova({
              scope: 'other_scope'
            });
            _this.driver.setStorageKey(_this.client);
            return _this.driver.loadCredentials(function(credentials) {
              expect(credentials).to.equal(null);
              return done();
            });
          };
        })(this));
      });
    });
    return describe('integration', function() {
      beforeEach(function() {
        return this.cordova = typeof cordova !== "undefined" && cordova !== null;
      });
      it('should work with rememberUser: false', function(done) {
        var authDriver, client;
        if (!this.cordova) {
          return done();
        }
        this.timeout(45 * 1000);
        client = new Dropbox.Client(testKeys);
        client.reset();
        authDriver = new Dropbox.AuthDriver.Cordova({
          scope: 'cordova-integration',
          rememberUser: false
        });
        client.authDriver(authDriver);
        return client.authenticate((function(_this) {
          return function(error, client) {
            expect(error).to.equal(null);
            expect(client.authStep).to.equal(Dropbox.Client.DONE);
            return client.getAccountInfo(function(error, accountInfo) {
              expect(error).to.equal(null);
              expect(accountInfo).to.be.instanceOf(Dropbox.AccountInfo);
              client.reset();
              return client.authenticate({
                interactive: false
              }, function(error, client) {
                expect(error).to.equal(null);
                expect(client.authStep).to.equal(Dropbox.Client.RESET);
                expect(client.isAuthenticated()).to.equal(false);
                return done();
              });
            });
          };
        })(this));
      });
      it('should work with rememberUser: true', function(done) {
        var authDriver, client;
        if (!this.cordova) {
          return done();
        }
        this.timeout(45 * 1000);
        client = new Dropbox.Client(testKeys);
        client.reset();
        authDriver = new Dropbox.AuthDriver.Cordova({
          scope: 'cordova-integration',
          rememberUser: true
        });
        client.authDriver(authDriver);
        authDriver.setStorageKey(client);
        return authDriver.forgetCredentials(function() {
          return client.authenticate(function(error, client) {
            expect(error).to.equal(null);
            expect(client.authStep).to.equal(Dropbox.Client.DONE);
            return client.getAccountInfo(function(error, accountInfo) {
              expect(error).to.equal(null);
              expect(accountInfo).to.be.instanceOf(Dropbox.AccountInfo);
              client.reset();
              return client.authenticate({
                interactive: false
              }, function(error, client) {
                expect(error).to.equal(null);
                expect(client.authStep).to.equal(Dropbox.Client.DONE);
                expect(client.isAuthenticated()).to.equal(true);
                return client.getAccountInfo(function(error, accountInfo) {
                  expect(error).to.equal(null);
                  expect(accountInfo).to.be.instanceOf(Dropbox.AccountInfo);
                  return done();
                });
              });
            });
          });
        });
      });
      return it('should be the default driver on Cordova', function() {
        var client;
        if (!this.cordova) {
          return;
        }
        client = new Dropbox.Client(testKeys);
        Dropbox.AuthDriver.autoConfigure(client);
        return expect(client._driver).to.be.instanceOf(Dropbox.AuthDriver.Cordova);
      });
    });
  });

}).call(this);
